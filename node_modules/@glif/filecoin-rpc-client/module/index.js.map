{"version":3,"sources":["../src/index.ts"],"names":["axios","removeEmptyHeaders","headers","newHeaders","Object","keys","forEach","key","configureHeaders","token","reqHeaders","assign","Accept","Authorization","throwIfErrors","response","error","message","Error","deleteHeaders","opts","LotusRpcEngine","constructor","config","apiAddress","axiosOpts","request","method","params","data","post","jsonrpc","id","result"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAA0C,OAA1C;AAIA,OAAO,SAASC,kBAAT,CAA4BC,OAA5B,EAAuD;AAC5D,QAAMC,UAAmB,GAAG,EAA5B;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,OAArB,CAA8BC,GAAD,IAAS;AACpC,QAAIL,OAAO,CAACK,GAAD,CAAX,EAAkBJ,UAAU,CAACI,GAAD,CAAV,GAAkBL,OAAO,CAACK,GAAD,CAAzB;AACnB,GAFD;AAGA,SAAOJ,UAAP;AACD;AAED,OAAO,SAASK,gBAAT,CACLN,OAAgB,GAAG,EADd,EAELO,KAFK,EAGI;AACT,QAAMC,UAAmB,GAAGN,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkBT,OAAlB,EAA2B;AAAEU,IAAAA,MAAM,EAAE;AAAV,GAA3B,CAA5B;;AACA,MAAIH,KAAJ,EAAW;AACTC,IAAAA,UAAU,CAACG,aAAX,GAA4B,UAASJ,KAAM,EAA3C;AACD;;AACD,SAAOR,kBAAkB,CAACS,UAAD,CAAzB;AACD;AAED,OAAO,SAASI,aAAT,CAAuBC,QAAvB,EAA2C;AAChD,MAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClB,QAAID,QAAQ,CAACC,KAAT,CAAeC,OAAnB,EAA4B,MAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACC,KAAT,CAAeC,OAAzB,CAAN,CAA5B,KACK,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACN,GAHD,MAGO;AACL,WAAOH,QAAP;AACD;AACF;AAED,OAAO,SAASI,aAAT,CAAuBC,IAAvB,EAAqE;AAC1E,SAAOA,IAAI,CAAClB,OAAZ;AACA,SAAOkB,IAAP;AACD;AAQD,eAAe,MAAMC,cAAN,CAAqB;AAMlCC,EAAAA,WAAW,CAACC,MAAD,EAAgC;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACzC,QAAI,CAACA,MAAL,EACE,MAAM,IAAIL,KAAJ,CACJ,8DADI,CAAN;AAGF,SAAKM,UAAL,GAAkBD,MAAM,CAACC,UAAP,IAAqB,8BAAvC;AACA,SAAKf,KAAL,GAAac,MAAM,CAACd,KAApB;AACA,SAAKP,OAAL,GAAeM,gBAAgB,CAACe,MAAD,aAACA,MAAD,4CAACA,MAAM,CAAEE,SAAT,sDAAC,kBAAmBvB,OAApB,EAA6BqB,MAAM,CAACd,KAApC,CAA/B;AACA,SAAKgB,SAAL,GAAiBN,aAAa,CAACI,MAAM,CAACE,SAAP,IAAoB,EAArB,CAA9B;AACD;;AAEKC,EAAAA,OAAN,CAAuBC,MAAvB,EAAuC,GAAGC,MAA1C,EAAqE;AAAA;;AAAA;AACnE,YAAM;AAAEC,QAAAA;AAAF,gBAAiB7B,KAAK,CAAC8B,IAAN,CACrB,KAAI,CAACN,UADgB,EAErB;AACEO,QAAAA,OAAO,EAAE,KADX;AAEEJ,QAAAA,MAAM,EAAG,YAAWA,MAAO,EAF7B;AAGEC,QAAAA,MAHF;AAIEI,QAAAA,EAAE,EAAE;AAJN,OAFqB;AASnB9B,QAAAA,OAAO,EAAE,KAAI,CAACA;AATK,SAUhB,KAAI,CAACuB,SAVW,EAAvB;AAaAX,MAAAA,aAAa,CAACe,IAAD,CAAb;AACA,aAAOA,IAAI,CAACI,MAAZ;AAfmE;AAgBpE;;AAjCiC","sourcesContent":["import axios, { AxiosRequestConfig } from 'axios'\n\ntype Headers = Record<string, string | null | undefined>\n\nexport function removeEmptyHeaders(headers: Headers): Headers {\n  const newHeaders: Headers = {}\n  Object.keys(headers).forEach((key) => {\n    if (headers[key]) newHeaders[key] = headers[key]\n  })\n  return newHeaders\n}\n\nexport function configureHeaders(\n  headers: Headers = {},\n  token?: string,\n): Headers {\n  const reqHeaders: Headers = Object.assign({}, headers, { Accept: '*/*' })\n  if (token) {\n    reqHeaders.Authorization = `Bearer ${token}`\n  }\n  return removeEmptyHeaders(reqHeaders)\n}\n\nexport function throwIfErrors(response: any): any {\n  if (response.error) {\n    if (response.error.message) throw new Error(response.error.message)\n    else throw new Error('Unknown jsonrpc error')\n  } else {\n    return response\n  }\n}\n\nexport function deleteHeaders(opts: AxiosRequestConfig): AxiosRequestConfig {\n  delete opts.headers\n  return opts\n}\n\nexport type LotusRpcEngineConfig = {\n  apiAddress?: string\n  token?: string\n  axiosOpts?: AxiosRequestConfig\n}\n\nexport default class LotusRpcEngine {\n  readonly apiAddress: string\n  readonly token?: string\n  readonly axiosOpts: AxiosRequestConfig\n  readonly headers: Headers\n\n  constructor(config?: LotusRpcEngineConfig) {\n    if (!config)\n      throw new Error(\n        'Must pass a config object to the LotusRpcEngine constructor.',\n      )\n    this.apiAddress = config.apiAddress || 'http://127.0.0.1:1234/rpc/v0'\n    this.token = config.token\n    this.headers = configureHeaders(config?.axiosOpts?.headers, config.token)\n    this.axiosOpts = deleteHeaders(config.axiosOpts || {})\n  }\n\n  async request<A = any>(method: string, ...params: any[]): Promise<A> {\n    const { data } = await axios.post(\n      this.apiAddress,\n      {\n        jsonrpc: '2.0',\n        method: `Filecoin.${method}`,\n        params,\n        id: 1,\n      },\n      {\n        headers: this.headers,\n        ...this.axiosOpts,\n      },\n    )\n    throwIfErrors(data)\n    return data.result\n  }\n}\n"],"file":"index.js"}
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import axios from 'axios';
export function removeEmptyHeaders(headers) {
  const newHeaders = {};
  Object.keys(headers).forEach(key => {
    if (headers[key]) newHeaders[key] = headers[key];
  });
  return newHeaders;
}
export function configureHeaders(headers = {}, token) {
  const reqHeaders = Object.assign({}, headers, {
    Accept: '*/*'
  });

  if (token) {
    reqHeaders.Authorization = `Bearer ${token}`;
  }

  return removeEmptyHeaders(reqHeaders);
}
export function throwIfErrors(response) {
  if (response.error) {
    if (response.error.message) throw new Error(response.error.message);else throw new Error('Unknown jsonrpc error');
  } else {
    return response;
  }
}
export function deleteHeaders(opts) {
  delete opts.headers;
  return opts;
}
export default class LotusRpcEngine {
  constructor(config) {
    var _config$axiosOpts;

    _defineProperty(this, "apiAddress", void 0);

    _defineProperty(this, "token", void 0);

    _defineProperty(this, "axiosOpts", void 0);

    _defineProperty(this, "headers", void 0);

    if (!config) throw new Error('Must pass a config object to the LotusRpcEngine constructor.');
    this.apiAddress = config.apiAddress || 'http://127.0.0.1:1234/rpc/v0';
    this.token = config.token;
    this.headers = configureHeaders(config === null || config === void 0 ? void 0 : (_config$axiosOpts = config.axiosOpts) === null || _config$axiosOpts === void 0 ? void 0 : _config$axiosOpts.headers, config.token);
    this.axiosOpts = deleteHeaders(config.axiosOpts || {});
  }

  request(method, ...params) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const {
        data
      } = yield axios.post(_this.apiAddress, {
        jsonrpc: '2.0',
        method: `Filecoin.${method}`,
        params,
        id: 1
      }, _objectSpread({
        headers: _this.headers
      }, _this.axiosOpts));
      throwIfErrors(data);
      return data.result;
    })();
  }

}
//# sourceMappingURL=index.js.map
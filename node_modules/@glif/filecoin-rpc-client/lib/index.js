import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import axios from 'axios';
export function removeEmptyHeaders(headers) {
  var newHeaders = {};
  Object.keys(headers).forEach(function (key) {
    if (headers[key]) newHeaders[key] = headers[key];
  });
  return newHeaders;
}
export function configureHeaders() {
  var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var token = arguments.length > 1 ? arguments[1] : undefined;
  var reqHeaders = Object.assign({}, headers, {
    Accept: '*/*'
  });

  if (token) {
    reqHeaders.Authorization = "Bearer ".concat(token);
  }

  return removeEmptyHeaders(reqHeaders);
}
export function throwIfErrors(response) {
  if (response.error) {
    if (response.error.message) throw new Error(response.error.message);else throw new Error('Unknown jsonrpc error');
  } else {
    return response;
  }
}
export function deleteHeaders(opts) {
  delete opts.headers;
  return opts;
}

var LotusRpcEngine = /*#__PURE__*/function () {
  function LotusRpcEngine(config) {
    var _config$axiosOpts;

    _classCallCheck(this, LotusRpcEngine);

    _defineProperty(this, "apiAddress", void 0);

    _defineProperty(this, "token", void 0);

    _defineProperty(this, "axiosOpts", void 0);

    _defineProperty(this, "headers", void 0);

    if (!config) throw new Error('Must pass a config object to the LotusRpcEngine constructor.');
    this.apiAddress = config.apiAddress || 'http://127.0.0.1:1234/rpc/v0';
    this.token = config.token;
    this.headers = configureHeaders(config === null || config === void 0 ? void 0 : (_config$axiosOpts = config.axiosOpts) === null || _config$axiosOpts === void 0 ? void 0 : _config$axiosOpts.headers, config.token);
    this.axiosOpts = deleteHeaders(config.axiosOpts || {});
  }

  _createClass(LotusRpcEngine, [{
    key: "request",
    value: function () {
      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method) {
        var _len,
            params,
            _key,
            _yield$axios$post,
            data,
            _args = arguments;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                for (_len = _args.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  params[_key - 1] = _args[_key];
                }

                _context.next = 3;
                return axios.post(this.apiAddress, {
                  jsonrpc: '2.0',
                  method: "Filecoin.".concat(method),
                  params: params,
                  id: 1
                }, _objectSpread({
                  headers: this.headers
                }, this.axiosOpts));

              case 3:
                _yield$axios$post = _context.sent;
                data = _yield$axios$post.data;
                throwIfErrors(data);
                return _context.abrupt("return", data.result);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function request(_x) {
        return _request.apply(this, arguments);
      }

      return request;
    }()
  }]);

  return LotusRpcEngine;
}();

export { LotusRpcEngine as default };
//# sourceMappingURL=index.js.map
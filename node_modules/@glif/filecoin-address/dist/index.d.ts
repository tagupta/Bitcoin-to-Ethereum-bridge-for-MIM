import { Protocol } from './protocol';
import { Network } from './network';
export * from './network';
export * from './protocol';
export declare class Address {
    readonly str: Uint8Array;
    readonly _protocol: Protocol;
    readonly _network: Network;
    constructor(str: Uint8Array, network?: Network);
    network(): Network;
    protocol(): Protocol;
    payload(): Uint8Array;
    /**
     * toString returns a string representation of this address. If no "network"
     * parameter was passed to the constructor the address will be prefixed with
     * the default network prefix "f" (mainnet).
     */
    toString(): string;
    /**
     * equals determines if this address is the "same" address as the passed
     * address. Two addresses are considered equal if they are the same instance
     * OR if their "str" property matches byte for byte.
     */
    equals(addr: Address): boolean;
}
export declare function bigintToArray(v: string | BigInt | number): Uint8Array;
export declare function getChecksum(ingest: string | Uint8Array): Uint8Array;
export declare function validateChecksum(ingest: string | Uint8Array, expect: Uint8Array): 0 | 1 | -1;
export declare function newAddress(protocol: Protocol, payload: Uint8Array, network?: Network): Address;
export declare function newIDAddress(id: number | string, network?: Network): Address;
/**
 * newActorAddress returns an address using the Actor protocol.
 */
export declare function newActorAddress(data: Uint8Array): Address;
/**
 * newSecp256k1Address returns an address using the SECP256K1 protocol.
 */
export declare function newSecp256k1Address(pubkey: Uint8Array): Address;
/**
 * newBLSAddress returns an address using the BLS protocol.
 */
export declare function newBLSAddress(pubkey: Uint8Array): Address;
export declare function decode(address: string): Address;
export declare function encode(network: string, address: Address): string;
export declare function newFromString(address: string): Address;
export declare function validateAddressString(addressString: string): boolean;
export declare function checkAddressString(address: string): void;
/**
 * idFromAddress extracts the ID from an ID address.
 */
export declare function idFromAddress(address: Address): number;
declare const _default: {
    Address: typeof Address;
    newAddress: typeof newAddress;
    newIDAddress: typeof newIDAddress;
    newActorAddress: typeof newActorAddress;
    newSecp256k1Address: typeof newSecp256k1Address;
    newBLSAddress: typeof newBLSAddress;
    newFromString: typeof newFromString;
    bigintToArray: typeof bigintToArray;
    decode: typeof decode;
    encode: typeof encode;
    getChecksum: typeof getChecksum;
    validateChecksum: typeof validateChecksum;
    validateAddressString: typeof validateAddressString;
    checkAddressString: typeof checkAddressString;
    idFromAddress: typeof idFromAddress;
    Network: typeof Network;
    Protocol: typeof Protocol;
};
export default _default;
//# sourceMappingURL=index.d.ts.map
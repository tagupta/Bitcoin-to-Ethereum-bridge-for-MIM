export declare enum LogLevel {
    Error = 0,
    Warn = 1,
    Log = 2,
    Info = 3,
    Debug = 4,
    Trace = 5
}
export interface Logger {
    level?: unknown;
    error(message?: unknown, ...optionalParams: unknown[]): void;
    warn(message?: unknown, ...optionalParams: unknown[]): void;
    log(message?: unknown, ...optionalParams: unknown[]): void;
    info(message?: unknown, ...optionalParams: unknown[]): void;
    debug(message?: unknown, ...optionalParams: unknown[]): void;
    trace(message?: unknown, ...optionalParams: unknown[]): void;
}
export declare type LogLevelString = "error" | "warn" | "log" | "info" | "debug" | "trace" | LogLevel;
declare type Prefix = (level: LogLevelString) => string | undefined;
/**
 * SimpleLogger is a implementation of the Logger interface that also supports
 * setting the log level.
 *
 * @export
 * @class SimpleLogger
 */
export declare class SimpleLogger {
    level: LogLevel;
    logPrefix: Prefix;
    debugPrefix: Prefix;
    constructor(level?: LogLevelString, logPrefix?: Prefix | string, debugPrefix?: Prefix | string);
    trace: (message?: unknown, ...optionalParams: unknown[]) => void;
    debug: (message?: unknown, ...optionalParams: unknown[]) => void;
    info: (...optionalParams: unknown[]) => void;
    log: (...optionalParams: unknown[]) => void;
    warn: (...optionalParams: unknown[]) => void;
    error: (...optionalParams: unknown[]) => void;
}
export declare const NullLogger: Logger;
export {};

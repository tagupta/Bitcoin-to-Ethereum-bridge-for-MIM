"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.marshalTypedPackValue = exports.marshalPackValue = exports.marshalListStruct = exports.marshalPackStruct = exports.marshalPackPrimitive = exports.marshalPackTypeDefinition = exports.marshalPackListType = exports.marshalPackStructType = exports.marshalString = exports.marshalU256 = exports.marshalU128 = exports.marshalU64 = exports.marshalU32 = exports.marshalU16 = exports.marshalU8 = exports.marshalUint = exports.marshalPackType = void 0;
const utils_1 = require("@renproject/utils");
const bn_js_1 = __importDefault(require("bn.js"));
const pack_1 = require("./pack");
const marshalPackType = (type) => {
    switch (type) {
        case "nil":
            return 0;
        // KindBool is the kind of all Bool values.
        case pack_1.PackPrimitive.Bool:
            return 1;
        // KindU8 is the kind of all U8 values.
        case pack_1.PackPrimitive.U8:
            return 2;
        // KindU16 is the kind of all U16 values.
        case pack_1.PackPrimitive.U16:
            return 3;
        // KindU32 is the kind of all U32 values.
        case pack_1.PackPrimitive.U32:
            return 4;
        // KindU64 is the kind of all U64 values.
        case pack_1.PackPrimitive.U64:
            return 5;
        // KindU128 is the kind of all U128 values.
        case pack_1.PackPrimitive.U128:
            return 6;
        // KindU256 is the kind of all U256 values.
        case pack_1.PackPrimitive.U256:
            return 7;
        // KindString is the kind of all utf8 strings.
        case pack_1.PackPrimitive.Str:
            return 10;
        // KindBytes is the kind of all dynamic byte arrays.
        case pack_1.PackPrimitive.Bytes:
            return 11;
        // KindBytes32 is the kind of all 32-byte arrays.
        case pack_1.PackPrimitive.Bytes32:
            return 12;
        // KindBytes65 is the kind of all 65-byte arrays.
        case pack_1.PackPrimitive.Bytes65:
            return 13;
        // KindStruct is the kind of all struct values. It is abstract, because it does
        // not specify the fields in the struct.
        case "struct":
            return 20;
        // KindList is the kind of all list values. It is abstract, because it does
        // not specify the type of the elements in the list.
        case "list":
            return 21;
    }
    throw new Error(`Unknown type ${String(type)}.`);
};
exports.marshalPackType = marshalPackType;
const marshalUint = (value, length) => {
    try {
        return new bn_js_1.default(typeof value === "number" ? value : value.toString()).toArrayLike(Buffer, "be", length);
    }
    catch (error) {
        error.message = `Unable to marshal uint${length * 8} '${value}': ${String(error.message)}`;
        throw error;
    }
};
exports.marshalUint = marshalUint;
const marshalU = (length) => (value) => exports.marshalUint(value, length);
exports.marshalU8 = marshalU(8 / 8);
exports.marshalU16 = marshalU(16 / 8);
exports.marshalU32 = marshalU(32 / 8);
exports.marshalU64 = marshalU(64 / 8);
exports.marshalU128 = marshalU(128 / 8);
exports.marshalU256 = marshalU(256 / 8);
const withLength = (value) => Buffer.concat([exports.marshalU32(value.length), value]);
const marshalString = (value) => {
    return withLength(Buffer.from(value));
};
exports.marshalString = marshalString;
const marshalPackStructType = (type) => {
    const length = exports.marshalU32(type.struct.length);
    return Buffer.concat([
        Buffer.from([exports.marshalPackType("struct")]),
        length,
        ...type.struct.map((field) => {
            const keys = Object.keys(field);
            if (keys.length === 0) {
                throw new Error(`Invalid struct field with no entries.`);
            }
            if (keys.length > 1) {
                throw new Error(`Invalid struct field with multiple entries.`);
            }
            const key = Object.keys(field)[0];
            const fieldType = field[key];
            return Buffer.concat([
                exports.marshalString(key),
                exports.marshalPackTypeDefinition(fieldType),
            ]);
        }),
    ]);
};
exports.marshalPackStructType = marshalPackStructType;
const marshalPackListType = (type) => {
    return Buffer.concat([
        Buffer.from([exports.marshalPackType("list")]),
        exports.marshalPackTypeDefinition(type.list),
    ]);
};
exports.marshalPackListType = marshalPackListType;
const marshalPackTypeDefinition = (type) => {
    if (pack_1.isPackStructType(type)) {
        return exports.marshalPackStructType(type);
    }
    else if (pack_1.isPackListType(type)) {
        return exports.marshalPackListType(type);
    }
    else if (typeof type === "string") {
        return Buffer.from([exports.marshalPackType(type)]);
    }
    throw new Error(`Unable to marshal type ${String(type)}.`);
};
exports.marshalPackTypeDefinition = marshalPackTypeDefinition;
const marshalPackPrimitive = (type, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
value) => {
    switch (type) {
        // Booleans
        case pack_1.PackPrimitive.Bool:
            return exports.marshalU8(value ? 1 : 0);
        // Integers
        case pack_1.PackPrimitive.U8:
            return exports.marshalU8(value);
        case pack_1.PackPrimitive.U16:
            return exports.marshalU16(value);
        case pack_1.PackPrimitive.U32:
            return exports.marshalU32(value);
        case pack_1.PackPrimitive.U64:
            return exports.marshalU64(value);
        case pack_1.PackPrimitive.U128:
            return exports.marshalU128(value);
        case pack_1.PackPrimitive.U256:
            return exports.marshalU256(value);
        // Strings
        case pack_1.PackPrimitive.Str: {
            return exports.marshalString(value);
        }
        // Bytes
        case pack_1.PackPrimitive.Bytes: {
            return withLength(Buffer.isBuffer(value)
                ? Buffer.from(value)
                : // Supports base64 url format
                    utils_1.fromBase64(value));
        }
        case pack_1.PackPrimitive.Bytes32:
        case pack_1.PackPrimitive.Bytes65:
            return Buffer.isBuffer(value)
                ? Buffer.from(value)
                : // Supports base64 url format
                    utils_1.fromBase64(value);
    }
};
exports.marshalPackPrimitive = marshalPackPrimitive;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const marshalPackStruct = (type, value) => {
    return Buffer.concat(type.struct.map((member) => {
        const keys = Object.keys(member);
        if (keys.length === 0) {
            throw new Error(`Invalid struct member with no entries.`);
        }
        if (keys.length > 1) {
            throw new Error(`Invalid struct member with multiple entries.`);
        }
        const key = Object.keys(member)[0];
        const memberType = member[key];
        try {
            return exports.marshalPackValue(memberType, value[key]);
        }
        catch (error) {
            error.message = `Unable to marshal struct field ${key}: ${String(error.message)}`;
            throw error;
        }
    }));
};
exports.marshalPackStruct = marshalPackStruct;
const marshalListStruct = (type, value) => {
    const subtype = type.list;
    return Buffer.concat(value.map((element, i) => {
        try {
            return exports.marshalPackValue(subtype, element);
        }
        catch (error) {
            error.message = `Unable to marshal array element #${i}: ${String(error.message)}`;
            throw error;
        }
    }));
};
exports.marshalListStruct = marshalListStruct;
const marshalPackValue = (type, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
value) => {
    if (pack_1.isPackStructType(type)) {
        return exports.marshalPackStruct(type, value);
    }
    else if (pack_1.isPackListType(type)) {
        return exports.marshalListStruct(type, value);
    }
    else if (typeof type === "string") {
        if (type === "nil")
            return Buffer.from([]);
        return exports.marshalPackPrimitive(type, value);
    }
    throw new Error(`Unknown value type ${String(type)}${!type ? ` for value ${String(value)}` : ""}`);
};
exports.marshalPackValue = marshalPackValue;
const marshalTypedPackValue = ({ t, v }) => {
    const marshalledType = exports.marshalPackTypeDefinition(t);
    const marshalledValue = exports.marshalPackValue(t, v);
    return Buffer.concat([marshalledType, marshalledValue]);
};
exports.marshalTypedPackValue = marshalTypedPackValue;
//# sourceMappingURL=marshal.js.map
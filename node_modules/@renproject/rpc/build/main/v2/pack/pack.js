"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unmarshalTypedPackValue = exports.unmarshalPackValue = exports.unmarshalPackList = exports.unmarshalPackStruct = exports.unmarshalPackPrimitive = exports.isPackListType = exports.isPackStructType = exports.PackPrimitive = void 0;
const utils_1 = require("@renproject/utils");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
var PackPrimitive;
(function (PackPrimitive) {
    PackPrimitive["Bool"] = "bool";
    PackPrimitive["U8"] = "u8";
    PackPrimitive["U16"] = "u16";
    PackPrimitive["U32"] = "u32";
    PackPrimitive["U64"] = "u64";
    PackPrimitive["U128"] = "u128";
    PackPrimitive["U256"] = "u256";
    PackPrimitive["Str"] = "string";
    PackPrimitive["Bytes"] = "bytes";
    PackPrimitive["Bytes32"] = "bytes32";
    PackPrimitive["Bytes65"] = "bytes65";
})(PackPrimitive = exports.PackPrimitive || (exports.PackPrimitive = {}));
const isPackStructType = (type) => {
    return (typeof type === "object" &&
        type.struct !== undefined);
};
exports.isPackStructType = isPackStructType;
const isPackListType = (type) => {
    return (typeof type === "object" && type.list !== undefined);
};
exports.isPackListType = isPackListType;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const unmarshalPackPrimitive = (type, value) => {
    switch (type) {
        // Booleans
        case PackPrimitive.Bool:
            return value;
        // Integers
        case PackPrimitive.U8:
        case PackPrimitive.U16:
        case PackPrimitive.U32:
        case PackPrimitive.U64:
        case PackPrimitive.U128:
        case PackPrimitive.U256:
            return new bignumber_js_1.default(value);
        // Strings
        case PackPrimitive.Str:
            return value;
        // Bytes
        case PackPrimitive.Bytes:
        case PackPrimitive.Bytes32:
        case PackPrimitive.Bytes65:
            return utils_1.fromBase64(value);
    }
};
exports.unmarshalPackPrimitive = unmarshalPackPrimitive;
const unmarshalPackStruct = (type, value) => {
    const struct = {};
    for (const member of type.struct) {
        const keys = Object.keys(member);
        if (keys.length === 0) {
            throw new Error(`Invalid struct member with no entries.`);
        }
        if (keys.length > 1) {
            throw new Error(`Invalid struct member with multiple entries.`);
        }
        const key = Object.keys(member)[0];
        const memberType = member[key];
        if (value && !value.hasOwnProperty(key)) {
            throw new Error(`Missing pack value for key ${key}.`);
        }
        struct[key] = exports.unmarshalPackValue(memberType, value[key]);
    }
    return struct;
};
exports.unmarshalPackStruct = unmarshalPackStruct;
/**
 * Unmarshals a pack list.
 */
const unmarshalPackList = (type, value) => {
    return value.map((element) => exports.unmarshalPackValue(type.list, element));
};
exports.unmarshalPackList = unmarshalPackList;
const unmarshalPackValue = (type, value) => {
    if (exports.isPackListType(type)) {
        return exports.unmarshalPackList(type, value);
    }
    else if (exports.isPackStructType(type)) {
        return exports.unmarshalPackStruct(type, value);
    }
    else if (typeof type === "string") {
        if (type === "nil")
            return null;
        return exports.unmarshalPackPrimitive(type, value);
    }
    let valueString;
    try {
        valueString = JSON.stringify(value);
    }
    catch (_error) {
        valueString = String(value);
    }
    if (valueString.length > 20) {
        valueString = `${valueString.slice(0, 17)}...`;
    }
    throw new Error(`Unknown value type ${String(type)}${!type ? ` for value ${valueString}` : ""}.`);
};
exports.unmarshalPackValue = unmarshalPackValue;
const unmarshalTypedPackValue = ({ t, v }) => {
    return exports.unmarshalPackValue(t, v);
};
exports.unmarshalTypedPackValue = unmarshalTypedPackValue;
//# sourceMappingURL=pack.js.map
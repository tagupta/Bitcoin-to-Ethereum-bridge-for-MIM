/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LinkedListTestInterface extends ethers.utils.Interface {
  functions: {
    "append(address)": FunctionFragment;
    "begin()": FunctionFragment;
    "elements(address,uint256)": FunctionFragment;
    "end()": FunctionFragment;
    "insertAfter(address,address)": FunctionFragment;
    "insertBefore(address,address)": FunctionFragment;
    "isInList(address)": FunctionFragment;
    "next(address)": FunctionFragment;
    "prepend(address)": FunctionFragment;
    "previous(address)": FunctionFragment;
    "remove(address)": FunctionFragment;
    "swap(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "append", values: [string]): string;
  encodeFunctionData(functionFragment: "begin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "elements",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "insertAfter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "insertBefore",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isInList", values: [string]): string;
  encodeFunctionData(functionFragment: "next", values: [string]): string;
  encodeFunctionData(functionFragment: "prepend", values: [string]): string;
  encodeFunctionData(functionFragment: "previous", values: [string]): string;
  encodeFunctionData(functionFragment: "remove", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "append", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "begin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "elements", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insertAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "next", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "previous", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export class LinkedListTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LinkedListTestInterface;

  functions: {
    append(
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    begin(overrides?: CallOverrides): Promise<[string]>;

    elements(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    end(overrides?: CallOverrides): Promise<[string]>;

    insertAfter(
      target: string,
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insertBefore(
      target: string,
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInList(node: string, overrides?: CallOverrides): Promise<[boolean]>;

    next(node: string, overrides?: CallOverrides): Promise<[string]>;

    prepend(
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    previous(node: string, overrides?: CallOverrides): Promise<[string]>;

    remove(
      node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      node1: string,
      node2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  append(
    newNode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  begin(overrides?: CallOverrides): Promise<string>;

  elements(
    _start: string,
    _count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  end(overrides?: CallOverrides): Promise<string>;

  insertAfter(
    target: string,
    newNode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insertBefore(
    target: string,
    newNode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInList(node: string, overrides?: CallOverrides): Promise<boolean>;

  next(node: string, overrides?: CallOverrides): Promise<string>;

  prepend(
    newNode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  previous(node: string, overrides?: CallOverrides): Promise<string>;

  remove(
    node: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    node1: string,
    node2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    append(newNode: string, overrides?: CallOverrides): Promise<void>;

    begin(overrides?: CallOverrides): Promise<string>;

    elements(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    end(overrides?: CallOverrides): Promise<string>;

    insertAfter(
      target: string,
      newNode: string,
      overrides?: CallOverrides
    ): Promise<void>;

    insertBefore(
      target: string,
      newNode: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isInList(node: string, overrides?: CallOverrides): Promise<boolean>;

    next(node: string, overrides?: CallOverrides): Promise<string>;

    prepend(newNode: string, overrides?: CallOverrides): Promise<void>;

    previous(node: string, overrides?: CallOverrides): Promise<string>;

    remove(node: string, overrides?: CallOverrides): Promise<void>;

    swap(
      node1: string,
      node2: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    append(
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    begin(overrides?: CallOverrides): Promise<BigNumber>;

    elements(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    end(overrides?: CallOverrides): Promise<BigNumber>;

    insertAfter(
      target: string,
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insertBefore(
      target: string,
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInList(node: string, overrides?: CallOverrides): Promise<BigNumber>;

    next(node: string, overrides?: CallOverrides): Promise<BigNumber>;

    prepend(
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    previous(node: string, overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      node1: string,
      node2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    append(
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    begin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    elements(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    end(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    insertAfter(
      target: string,
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insertBefore(
      target: string,
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInList(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    next(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepend(
      newNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    previous(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      node1: string,
      node2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

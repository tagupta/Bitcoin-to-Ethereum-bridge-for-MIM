/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LockGatewayLogicV1Interface extends ethers.utils.Interface {
  functions: {
    "_directTransferOwnership(address)": FunctionFragment;
    "blacklistRecoverableToken(address)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "claimTokenOwnership()": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "hashForSignature(bytes32,uint256,address,bytes32)": FunctionFragment;
    "initialize(address,address,address,uint16,uint16,uint256)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "lock(string,bytes,bytes,uint256)": FunctionFragment;
    "lockFee()": FunctionFragment;
    "minimumBurnAmount()": FunctionFragment;
    "mintAuthority()": FunctionFragment;
    "nextN()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "recoverTokens(address)": FunctionFragment;
    "release(bytes32,uint256,bytes32,bytes)": FunctionFragment;
    "releaseFee()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "status(bytes32)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFeeRecipient(address)": FunctionFragment;
    "updateLockFee(uint16)": FunctionFragment;
    "updateMintAuthority(address)": FunctionFragment;
    "updateReleaseFee(uint16)": FunctionFragment;
    "verifySignature(bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_directTransferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistRecoverableToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokenOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashForSignature",
    values: [BytesLike, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lockFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumBurnAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nextN", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLockFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReleaseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_directTransferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistRecoverableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokenOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashForSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumBurnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "releaseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLockFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReleaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;

  events: {
    "LogLock(bytes,bytes,uint256,uint256,bytes)": EventFragment;
    "LogMintAuthorityUpdated(address)": EventFragment;
    "LogRelease(address,uint256,uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogLock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMintAuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class LockGatewayLogicV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LockGatewayLogicV1Interface;

  functions: {
    _directTransferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blacklistRecoverableToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokenOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    hashForSignature(
      _pHash: BytesLike,
      _amount: BigNumberish,
      _to: string,
      _nHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "initialize(address,address,address,uint16,uint16,uint256)"(
      _token: string,
      _feeRecipient: string,
      _mintAuthority: string,
      _lockFee: BigNumberish,
      _releaseFee: BigNumberish,
      _minimumBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _nextOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    lock(
      _chain: string,
      _to: BytesLike,
      _payload: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockFee(overrides?: CallOverrides): Promise<[number]>;

    minimumBurnAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAuthority(overrides?: CallOverrides): Promise<[string]>;

    nextN(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    recoverTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    release(
      _pHash: BytesLike,
      _amount: BigNumberish,
      _nHash: BytesLike,
      _sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseFee(overrides?: CallOverrides): Promise<[number]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    status(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeRecipient(
      _nextFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLockFee(
      _nextLockFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMintAuthority(
      _nextMintAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateReleaseFee(
      _nextReleaseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifySignature(
      _signedMessageHash: BytesLike,
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  _directTransferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blacklistRecoverableToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokenOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  hashForSignature(
    _pHash: BytesLike,
    _amount: BigNumberish,
    _to: string,
    _nHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "initialize(address,address,address,uint16,uint16,uint256)"(
    _token: string,
    _feeRecipient: string,
    _mintAuthority: string,
    _lockFee: BigNumberish,
    _releaseFee: BigNumberish,
    _minimumBurnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _nextOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  lock(
    _chain: string,
    _to: BytesLike,
    _payload: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockFee(overrides?: CallOverrides): Promise<number>;

  minimumBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mintAuthority(overrides?: CallOverrides): Promise<string>;

  nextN(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  recoverTokens(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  release(
    _pHash: BytesLike,
    _amount: BigNumberish,
    _nHash: BytesLike,
    _sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseFee(overrides?: CallOverrides): Promise<number>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  status(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeRecipient(
    _nextFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLockFee(
    _nextLockFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMintAuthority(
    _nextMintAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateReleaseFee(
    _nextReleaseFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifySignature(
    _signedMessageHash: BytesLike,
    _sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    _directTransferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklistRecoverableToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    claimTokenOwnership(overrides?: CallOverrides): Promise<void>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    hashForSignature(
      _pHash: BytesLike,
      _amount: BigNumberish,
      _to: string,
      _nHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "initialize(address,address,address,uint16,uint16,uint256)"(
      _token: string,
      _feeRecipient: string,
      _mintAuthority: string,
      _lockFee: BigNumberish,
      _releaseFee: BigNumberish,
      _minimumBurnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _nextOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    lock(
      _chain: string,
      _to: BytesLike,
      _payload: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockFee(overrides?: CallOverrides): Promise<number>;

    minimumBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mintAuthority(overrides?: CallOverrides): Promise<string>;

    nextN(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    recoverTokens(_token: string, overrides?: CallOverrides): Promise<void>;

    release(
      _pHash: BytesLike,
      _amount: BigNumberish,
      _nHash: BytesLike,
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseFee(overrides?: CallOverrides): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    status(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeRecipient(
      _nextFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLockFee(
      _nextLockFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMintAuthority(
      _nextMintAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReleaseFee(
      _nextReleaseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    verifySignature(
      _signedMessageHash: BytesLike,
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    LogLock(
      _to?: null,
      _p?: null,
      _amount?: null,
      _n?: BigNumberish | null,
      _indexedTo?: BytesLike | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        _to: string;
        _p: string;
        _amount: BigNumber;
        _n: BigNumber;
        _indexedTo: string;
      }
    >;

    LogMintAuthorityUpdated(
      _newMintAuthority?: string | null
    ): TypedEventFilter<[string], { _newMintAuthority: string }>;

    LogRelease(
      _to?: string | null,
      _amount?: null,
      _n?: BigNumberish | null,
      _signedMessageHash?: BytesLike | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        _to: string;
        _amount: BigNumber;
        _n: BigNumber;
        _signedMessageHash: string;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    _directTransferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blacklistRecoverableToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokenOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    hashForSignature(
      _pHash: BytesLike,
      _amount: BigNumberish,
      _to: string,
      _nHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,uint16,uint16,uint256)"(
      _token: string,
      _feeRecipient: string,
      _mintAuthority: string,
      _lockFee: BigNumberish,
      _releaseFee: BigNumberish,
      _minimumBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      _nextOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      _chain: string,
      _to: BytesLike,
      _payload: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockFee(overrides?: CallOverrides): Promise<BigNumber>;

    minimumBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mintAuthority(overrides?: CallOverrides): Promise<BigNumber>;

    nextN(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    release(
      _pHash: BytesLike,
      _amount: BigNumberish,
      _nHash: BytesLike,
      _sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    status(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeRecipient(
      _nextFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLockFee(
      _nextLockFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMintAuthority(
      _nextMintAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateReleaseFee(
      _nextReleaseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifySignature(
      _signedMessageHash: BytesLike,
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _directTransferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blacklistRecoverableToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokenOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashForSignature(
      _pHash: BytesLike,
      _amount: BigNumberish,
      _to: string,
      _nHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,uint16,uint16,uint256)"(
      _token: string,
      _feeRecipient: string,
      _mintAuthority: string,
      _lockFee: BigNumberish,
      _releaseFee: BigNumberish,
      _minimumBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _nextOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      _chain: string,
      _to: BytesLike,
      _payload: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumBurnAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAuthority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverTokens(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    release(
      _pHash: BytesLike,
      _amount: BigNumberish,
      _nHash: BytesLike,
      _sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    status(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeRecipient(
      _nextFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLockFee(
      _nextLockFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMintAuthority(
      _nextMintAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateReleaseFee(
      _nextReleaseFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifySignature(
      _signedMessageHash: BytesLike,
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

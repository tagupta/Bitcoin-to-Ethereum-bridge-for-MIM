/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { StringTest, StringTestInterface } from "../StringTest";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        internalType: "string",
        name: "a",
        type: "string",
      },
      {
        internalType: "string",
        name: "b",
        type: "string",
      },
      {
        internalType: "string",
        name: "c",
        type: "string",
      },
      {
        internalType: "string",
        name: "d",
        type: "string",
      },
    ],
    name: "add4",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "fromAddress",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes32",
        name: "_value",
        type: "bytes32",
      },
    ],
    name: "fromBytes32",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "uint256",
        name: "_i",
        type: "uint256",
      },
    ],
    name: "fromUint",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ee1806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634abd3462146100515780637d3d11d01461034a578063b72e717d146103f1578063e3814b19146104ae575b600080fd5b6102cf6004803603608081101561006757600080fd5b810190808035906020019064010000000081111561008457600080fd5b82018360208201111561009657600080fd5b803590602001918460018302840111640100000000831117156100b857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561011b57600080fd5b82018360208201111561012d57600080fd5b8035906020019184600183028401116401000000008311171561014f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156101b257600080fd5b8201836020820111156101c457600080fd5b803590602001918460018302840111640100000000831117156101e657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561024957600080fd5b82018360208201111561025b57600080fd5b8035906020019184600183028401116401000000008311171561027d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610555565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561030f5780820151818401526020810190506102f4565b50505050905090810190601f16801561033c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103766004803603602081101561036057600080fd5b81019080803590602001909291905050506105ad565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b657808201518184015260208101905061039b565b50505050905090810190601f1680156103e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104336004803603602081101561040757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105bf565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610473578082015181840152602081019050610458565b50505050905090810190601f1680156104a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104da600480360360208110156104c457600080fd5b81019080803590602001909291905050506105d1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561051a5780820151818401526020810190506104ff565b50505050905090810190601f1680156105475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606105a385858585604051806020016040528060008152506040518060200160405280600081525060405180602001604052806000815250604051806020016040528060008152506105e3565b9050949350505050565b60606105b8826108a3565b9050919050565b60606105ca82610afe565b9050919050565b60606105dc82610d7f565b9050919050565b606088888888888888886040516020018089805190602001908083835b602083106106235780518252602082019150602081019050602083039250610600565b6001836020036101000a03801982511681845116808217855250505050505090500188805190602001908083835b602083106106745780518252602082019150602081019050602083039250610651565b6001836020036101000a03801982511681845116808217855250505050505090500187805190602001908083835b602083106106c557805182526020820191506020810190506020830392506106a2565b6001836020036101000a03801982511681845116808217855250505050505090500186805190602001908083835b6020831061071657805182526020820191506020810190506020830392506106f3565b6001836020036101000a03801982511681845116808217855250505050505090500185805190602001908083835b602083106107675780518252602082019150602081019050602083039250610744565b6001836020036101000a03801982511681845116808217855250505050505090500184805190602001908083835b602083106107b85780518252602082019150602081019050602083039250610795565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b6020831061080957805182526020820191506020810190506020830392506107e6565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831061085a5780518252602082019150602081019050602083039250610837565b6001836020036101000a03801982511681845116808217855250505050505090500198505050505050505050604051602081830303815290604052905098975050505050505050565b6060806040518060400160405280601081526020017f30313233343536373839616263646566000000000000000000000000000000008152509050606060426040519080825280601f01601f1916602001820160405280156109145781602001600182028038833980820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061094557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106109a257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060008090505b6020811015610af3578260048683602081106109ef57fe5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610a2757fe5b602001015160f81c60f81b826002830260020181518110610a4457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b868360208110610a8557fe5b1a60f81b1660f81c60ff1681518110610a9a57fe5b602001015160f81c60f81b826002830260030181518110610ab757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506109d7565b508092505050919050565b606060008273ffffffffffffffffffffffffffffffffffffffff1660001b905060606040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506060602a6040519080825280601f01601f191660200182016040528015610b8e5781602001600182028038833980820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610bbf57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610c1c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060008090505b6014811015610d735782600485600c840160208110610c6c57fe5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610ca457fe5b602001015160f81c60f81b826002830260020181518110610cc157fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c840160208110610d0557fe5b1a60f81b1660f81c60ff1681518110610d1a57fe5b602001015160f81c60f81b826002830260030181518110610d3757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610c51565b50809350505050919050565b60606000821415610dc7576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610ea7565b600082905060005b60008214610df1578080600101915050600a8281610de957fe5b049150610dcf565b6060816040519080825280601f01601f191660200182016040528015610e265781602001600182028038833980820191505090505b50905060006001830390505b60008614610e9f57600a8681610e4457fe5b0660300160f81b82828060019003935081518110610e5e57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681610e9757fe5b049550610e32565b819450505050505b91905056fea265627a7a723158209bce388a3b612fc0973c04956aa31d2ba58332b8ea77e2fef66bca1fccd85c3e64736f6c63430005110032";

export class StringTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StringTest> {
    return super.deploy(overrides || {}) as Promise<StringTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StringTest {
    return super.attach(address) as StringTest;
  }
  connect(signer: Signer): StringTest__factory {
    return super.connect(signer) as StringTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StringTestInterface {
    return new utils.Interface(_abi) as StringTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StringTest {
    return new Contract(address, _abi, signerOrProvider) as StringTest;
  }
}

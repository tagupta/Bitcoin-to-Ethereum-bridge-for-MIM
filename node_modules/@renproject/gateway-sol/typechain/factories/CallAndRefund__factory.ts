/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CallAndRefund, CallAndRefundInterface } from "../CallAndRefund";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IGatewayRegistry",
        name: "_registry",
        type: "address",
      },
      {
        internalType: "contract GenericAdapter",
        name: "_genericAdapter",
        type: "address",
      },
      {
        internalType: "contract UniswapRouter",
        name: "_uniswapRouter",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_contractParams",
        type: "bytes",
      },
    ],
    name: "callAndRefund",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "convertAllToEth",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "genericAdapter",
    outputs: [
      {
        internalType: "contract GenericAdapter",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "receive",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract IGatewayRegistry",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "uniswapRouter",
    outputs: [
      {
        internalType: "contract UniswapRouter",
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610be0380380610be08339818101604052606081101561003357600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050610ab48061012c6000396000f3fe6080604052600436106100555760003560e01c80634876cfc91461005a578063735de9f7146101205780637b10399914610177578063a3e76c0f146101ce578063aaffd0ff146101d8578063d53bf5841461022f575b600080fd5b34801561006657600080fd5b5061011e6004803603606081101561007d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100da57600080fd5b8201836020820111156100ec57600080fd5b8035906020019184600183028401116401000000008311171561010e57600080fd5b9091929391929390505050610273565b005b34801561012c57600080fd5b50610135610399565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561018357600080fd5b5061018c6103bf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101d66103e5565b005b3480156101e457600080fd5b506101ed6103e7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102716004803603602081101561024557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061040c565b005b60005a90506102c68484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506108f4565b6102cf8561040c565b600047905060005a9050600081840390506177ec8101905060003a8202905080841015610347576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610a236023913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc859081150290604051600060405180830381858888f1935050505015801561038d573d6000803e3d6000fd5b50505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600260405190808252806020026020018201604052801561043e5781602001602082028038833980820191505090505b509050818160008151811061044f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156104f357600080fd5b505af1158015610507573d6000803e3d6000fd5b505050506040513d602081101561051d57600080fd5b81019080805190602001909291905050508160018151811061053b57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156105f457600080fd5b505afa158015610608573d6000803e3d6000fd5b505050506040513d602081101561061e57600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156106da57600080fd5b505af11580156106ee573d6000803e3d6000fd5b505050506040513d602081101561070457600080fd5b810190808051906020019092919050505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318cbafe58260008530426040518663ffffffff1660e01b815260040180868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156107f05780820151818401526020810190506107d5565b505050509050019650505050505050600060405180830381600087803b15801561081957600080fd5b505af115801561082d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561085757600080fd5b810190808051604051939291908464010000000082111561087757600080fd5b8382019150602082018581111561088d57600080fd5b82518660208202830111640100000000821117156108aa57600080fd5b8083526020830192505050908051906020019060200280838360005b838110156108e15780820151818401526020810190506108c6565b5050505090500160405250505050505050565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083106109435780518252602082019150602081019050602083039250610920565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109a5576040519150601f19603f3d011682016040523d82523d6000602084013e6109aa565b606091505b509150915081610a1c57604481511015610a0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180610a46603a913960400191505060405180910390fd5b6040513d806000833e8082fd5b5050505056fe4761736c65737357697468556e69737761703a2067617320657863656564732066656547656e65726963416461707465723a20636f6e74726163742063616c6c206661696c656420776974686f75742072657665727420726561736f6ea265627a7a723158202a46b5f16273d9cce41c71d8095e966d98a43fba35122f2b1d91da1a0fe1d75e64736f6c63430005110032";

export class CallAndRefund__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _registry: string,
    _genericAdapter: string,
    _uniswapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CallAndRefund> {
    return super.deploy(
      _registry,
      _genericAdapter,
      _uniswapRouter,
      overrides || {}
    ) as Promise<CallAndRefund>;
  }
  getDeployTransaction(
    _registry: string,
    _genericAdapter: string,
    _uniswapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _registry,
      _genericAdapter,
      _uniswapRouter,
      overrides || {}
    );
  }
  attach(address: string): CallAndRefund {
    return super.attach(address) as CallAndRefund;
  }
  connect(signer: Signer): CallAndRefund__factory {
    return super.connect(signer) as CallAndRefund__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallAndRefundInterface {
    return new utils.Interface(_abi) as CallAndRefundInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CallAndRefund {
    return new Contract(address, _abi, signerOrProvider) as CallAndRefund;
  }
}

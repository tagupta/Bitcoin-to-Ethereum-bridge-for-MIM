/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IGatewayRegistryInterface extends ethers.utils.Interface {
  functions: {
    "getGatewayBySymbol(string)": FunctionFragment;
    "getGatewayByToken(address)": FunctionFragment;
    "getGateways(address,uint256)": FunctionFragment;
    "getRenTokens(address,uint256)": FunctionFragment;
    "getTokenBySymbol(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getGatewayBySymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGatewayByToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGateways",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRenTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBySymbol",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getGatewayBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGatewayByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGateways",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRenTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBySymbol",
    data: BytesLike
  ): Result;

  events: {
    "LogGatewayDeregistered(string,string,address,address)": EventFragment;
    "LogGatewayRegistered(string,string,address,address)": EventFragment;
    "LogGatewayUpdated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogGatewayDeregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogGatewayRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogGatewayUpdated"): EventFragment;
}

export class IGatewayRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IGatewayRegistryInterface;

  functions: {
    getGatewayBySymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGatewayByToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGateways(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRenTokens(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTokenBySymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getGatewayBySymbol(
    _tokenSymbol: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getGatewayByToken(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getGateways(
    _start: string,
    _count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRenTokens(
    _start: string,
    _count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTokenBySymbol(
    _tokenSymbol: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getGatewayBySymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getGatewayByToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getGateways(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRenTokens(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTokenBySymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    LogGatewayDeregistered(
      _symbol?: null,
      _indexedSymbol?: string | null,
      _tokenAddress?: string | null,
      _gatewayAddress?: string | null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        _symbol: string;
        _indexedSymbol: string;
        _tokenAddress: string;
        _gatewayAddress: string;
      }
    >;

    LogGatewayRegistered(
      _symbol?: null,
      _indexedSymbol?: string | null,
      _tokenAddress?: string | null,
      _gatewayAddress?: string | null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        _symbol: string;
        _indexedSymbol: string;
        _tokenAddress: string;
        _gatewayAddress: string;
      }
    >;

    LogGatewayUpdated(
      _tokenAddress?: string | null,
      _currentGatewayAddress?: string | null,
      _newGatewayAddress?: string | null
    ): TypedEventFilter<
      [string, string, string],
      {
        _tokenAddress: string;
        _currentGatewayAddress: string;
        _newGatewayAddress: string;
      }
    >;
  };

  estimateGas: {
    getGatewayBySymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGatewayByToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGateways(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRenTokens(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenBySymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getGatewayBySymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGatewayByToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGateways(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRenTokens(
      _start: string,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBySymbol(
      _tokenSymbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

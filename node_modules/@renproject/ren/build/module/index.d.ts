/// <reference types="node" />
import { BurnAndReleaseParams, DepositCommon, LockAndMintParams, LockChain, MintChain, RenNetwork, RenNetworkDetails, RenNetworkString } from "@renproject/interfaces";
import { AbstractRenVMProvider } from "@renproject/rpc";
import BigNumber from "bignumber.js";
import { BurnAndRelease } from "./burnAndRelease";
import { RenJSConfig } from "./config";
import { LockAndMint, LockAndMintDeposit } from "./lockAndMint";
export { BurnAndRelease } from "./burnAndRelease";
export { LockAndMint, DepositStatus, LockAndMintDeposit } from "./lockAndMint";
/**
 * This is the main exported class from `@renproject/ren`.
 *
 * ```typescript
 * import RenJS from "@renproject/ren";
 * ```
 *
 * By default, RenJS will connect to the RenVM mainnet network. To connect
 * to `testnet` or to configure a custom connection, RenJS takes an optional
 * provider object. See the [[constructor]] for more details.
 *
 * ```typescript
 * new RenJS(); // Same as `new RenJS("mainnet");`
 * new RenJS("testnet");
 * new RenJS(custom provider object);
 * ```
 *
 * It then exposes two main functions:
 * 1. [[lockAndMint]] - for transferring assets to Ethereum.
 * 2. [[burnAndRelease]] - for transferring assets out of Ethereum.
 *
 * Also see:
 * 1. [[getFees]] - for estimating the fees that will be incurred by minting or
 * burning.
 * 2. [[defaultDepositHandler]]
 *
 */
export default class RenJS {
    /**
     * `Networks` exposes the network options that can be passed in to the RenJS
     * constructor. `Networks.Mainnet` resolves to the string `"mainnet"`.
     */
    static Networks: typeof RenNetwork;
    /**
     * A collection of helper functions. [[utils.randomNonce]] can be be used to
     * generate a nonce when calling [[RenJS.lockAndMint]].
     */
    static utils: {
        randomNonce: () => Buffer;
        toSmallestUnit: (value: import("@renproject/interfaces").NumberValue, decimals: number) => string;
        fromSmallestUnit: (value: import("@renproject/interfaces").NumberValue, decimals: number) => string;
        fromAscii: (str: string) => Buffer;
    };
    /**
     * `RenJS.defaultDepositHandler` can be passed as a deposit callback when
     * minting. It will handle submitting to RenVM and then to the mint-chain,
     * as long as a valid provider for the mint-chain is given.
     *
     * This is not recommended for front-ends, since it may trigger a wallet
     * pop-up unexpectedly when the mint is ready to be submitted.
     *
     * ```ts
     * lockAndMint.on("deposit", RenJS.defaultDepositHandler);
     * ```
     */
    static defaultDepositHandler: ((deposit: LockAndMintDeposit<any, DepositCommon<any>, any, any, any>) => Promise<void>) & {
        withRetries: (newRetries: number) => void;
    };
    /**
     * @hidden
     */
    readonly utils: {
        randomNonce: () => Buffer;
        toSmallestUnit: (value: import("@renproject/interfaces").NumberValue, decimals: number) => string;
        fromSmallestUnit: (value: import("@renproject/interfaces").NumberValue, decimals: number) => string;
        fromAscii: (str: string) => Buffer;
    };
    /**
     * RenVM provider exposing `sendMessage` and other helper functions for
     * interacting with RenVM. See [[AbstractRenVMProvider]].
     *
     * ```ts
     * renJS.renVM.sendMessage("ren_queryNumPeers", {});
     * ```
     */
    readonly renVM: AbstractRenVMProvider;
    private readonly _logger;
    private readonly _config;
    /**
     * Accepts the name of a network, or a network object.
     *
     * @param network Provide the name of a network - `"mainnet"` or `"testnet"` - or a network object.
     * @param providerOrConfig Provide a custom RPC provider, or provide RenJS configuration settings.
     */
    constructor(providerOrNetwork?: RenNetwork | RenNetworkString | RenNetworkDetails | AbstractRenVMProvider | null | undefined, config?: RenJSConfig);
    getFees: ({ asset, from, to, }: {
        asset: string;
        from: LockChain<any, any, any> | MintChain<any, any>;
        to: LockChain<any, any, any> | MintChain<any, any>;
    }) => Promise<{
        lock?: BigNumber;
        release?: BigNumber;
        mint: number;
        burn: number;
    }>;
    /**
     * `lockAndMint` initiates the process of bridging an asset from its native
     * chain to a host chain.
     *
     * See [[LockAndMintParams]] for all the options that can be set.
     *
     * Returns a [[LockAndMint]] object.
     *
     * Example initialization:
     *
     * ```js
     * const lockAndMint = renJS.lockAndMint({
     *     asset: "BTC",
     *     from: Bitcoin(),
     *     to: Ethereum(web3Provider).Account({
     *         address: "0x...",
     *     }),
     * });
     * ```
     *
     * @param params See [[LockAndMintParams]].
     */
    readonly lockAndMint: <Transaction = any, Deposit extends DepositCommon<Transaction> = DepositCommon<Transaction>, Address extends string | {
        address: string;
    } = any>(params: LockAndMintParams<Transaction, Deposit, Address, any, any>, config?: RenJSConfig | undefined) => Promise<LockAndMint<Transaction, Deposit, Address, any, any>>;
    /**
     * `burnAndRelease` submits a burn log to RenVM.
     * Returns a [[BurnAndRelease]] object.
     */
    readonly burnAndRelease: <Transaction = any, Deposit extends DepositCommon<Transaction> = DepositCommon<Transaction>, Address extends string | {
        address: string;
    } = any>(params: BurnAndReleaseParams<Transaction, Deposit, Address, any, any>, config?: RenJSConfig | undefined) => Promise<BurnAndRelease<Transaction, Deposit, Address, any, any>>;
}

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export const getHeight = (client) => __awaiter(void 0, void 0, void 0, function* () {
    const chainHead = yield client.request("ChainHead");
    return chainHead.Height;
});
export const fetchDeposits = (client, address, params, network, fromHeight, latestHeight) => __awaiter(void 0, void 0, void 0, function* () {
    const latestTXs = yield client.request("StateListMessages", {
        Version: 0,
        To: address,
        From: null,
        Nonce: 0,
        Value: "0",
        GasPrice: "0",
        GasLimit: 0,
        Method: 0,
        Params: params,
    }, [], fromHeight);
    return yield Promise.all((latestTXs || []).map((cid) => __awaiter(void 0, void 0, void 0, function* () { return fetchMessage(client, cid["/"], network, latestHeight); })));
});
export const fetchMessage = (client, cid, network, height) => __awaiter(void 0, void 0, void 0, function* () {
    const [details, receipt, { Height: chainHeight }] = yield Promise.all([
        client.request("ChainGetMessage", { "/": cid }),
        client.request("StateSearchMsg", { "/": cid }).catch(() => undefined),
        height ? { Height: height } : client.request("ChainHead"),
    ]);
    if (network === "testnet") {
        details.To = details.To.replace(/^f/, "t");
        details.From = details.From.replace(/^f/, "t");
    }
    const tx = {
        cid,
        amount: details.Value,
        params: details.Params || "",
        nonce: details.Nonce,
        confirmations: receipt ? chainHeight - receipt.Height : 0,
    };
    return tx;
});
//# sourceMappingURL=lotus.js.map
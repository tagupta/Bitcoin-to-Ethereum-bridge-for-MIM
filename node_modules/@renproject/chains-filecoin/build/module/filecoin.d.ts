/// <reference types="node" />
import FilecoinClient from "@glif/filecoin-rpc-client";
import { BurnPayloadConfig, LockChain, RenNetwork, RenNetworkDetails, RenNetworkString } from "@renproject/interfaces";
import { Filfox } from "./api/explorers/filfox";
import { FilNetwork as FilNetworkImport, FilTransaction } from "./deposit";
export declare type FilNetwork = FilNetworkImport;
export declare type FilAddress = {
    address: string;
    params?: string;
};
export declare type FilDeposit = {
    transaction: FilTransaction;
    amount: string;
};
interface ConstructorOptions {
    apiAddress?: string;
    token?: string;
    useParams?: boolean;
}
export declare class FilecoinClass implements LockChain<FilTransaction, FilDeposit, FilAddress, FilNetwork, number> {
    static chain: string;
    chain: string;
    name: string;
    renNetwork: RenNetworkDetails | undefined;
    chainNetwork: FilNetwork | undefined;
    asset: string;
    client: FilecoinClient | undefined;
    clientOptions: ConstructorOptions;
    noParamsFlag: boolean | undefined;
    filfox: Filfox | undefined;
    static utils: {
        resolveChainNetwork: (network: RenNetwork | RenNetworkString | RenNetworkDetails | FilNetwork) => FilNetwork;
        addressIsValid: (address: FilAddress | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | FilNetwork) => any;
        transactionIsValid: (transaction: string | FilTransaction, _network?: "mainnet" | "testnet" | "devnet" | RenNetworkDetails | RenNetwork | "localnet" | undefined) => boolean;
        addressExplorerLink: (address: FilAddress | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | FilNetwork) => string;
        transactionExplorerLink: (transaction: FilTransaction | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | FilNetwork) => string;
    };
    utils: {
        resolveChainNetwork: (network: RenNetwork | RenNetworkString | RenNetworkDetails | FilNetwork) => FilNetwork;
        addressIsValid: (address: FilAddress | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | FilNetwork) => any;
        transactionIsValid: (transaction: string | FilTransaction, _network?: "mainnet" | "testnet" | "devnet" | RenNetworkDetails | RenNetwork | "localnet" | undefined) => boolean;
        addressExplorerLink: (address: FilAddress | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | FilNetwork) => string;
        transactionExplorerLink: (transaction: FilTransaction | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | FilNetwork) => string;
    } & {
        addressIsValid: (address: string, network?: FilNetworkImport | undefined) => boolean;
        addressExplorerLink: ((address: FilAddress, network?: FilNetworkImport | undefined) => string | undefined) | undefined;
        transactionExplorerLink: ((tx: FilTransaction, network?: FilNetworkImport | undefined) => string | undefined) | undefined;
    };
    constructor(network?: FilNetwork, { useParams, ...options }?: ConstructorOptions);
    /**
     * See [[LockChain.initialize]].
     */
    initialize: (renNetwork: RenNetwork | RenNetworkString | RenNetworkDetails) => this;
    /**
     * See [[LockChain.assetIsNative]].
     */
    assetIsNative: (asset: string) => boolean;
    assetIsSupported: (asset: string) => boolean;
    readonly assertAssetIsSupported: (asset: string) => void;
    /**
     * See [[LockChain.assetDecimals]].
     */
    assetDecimals: (asset: string) => number;
    /**
     * See [[LockChain.getDeposits]].
     */
    getDeposits: (asset: string, address: FilAddress, progress: number | undefined, onDeposit: (deposit: FilDeposit) => Promise<void>) => Promise<number>;
    /**
     * See [[LockChain.transactionConfidence]].
     */
    transactionConfidence: (transaction: FilTransaction) => Promise<{
        current: number;
        target: number;
    }>;
    /**
     * See [[LockChain.getGatewayAddress]].
     */
    getGatewayAddress: (asset: string, compressedPublicKey: Buffer, gHash: Buffer) => Promise<FilAddress> | FilAddress;
    encodeFilecoinAddress: (payload: Buffer) => any;
    /**
     * See [[LockChain.addressToBytes]].
     */
    addressToBytes: (address: FilAddress | string) => Buffer;
    /**
     * See [[LockChain.addressToBytes]].
     */
    bytesToAddress: (address: Buffer) => string;
    /** @deprecated. Renamed to addressToBytes. */
    addressStringToBytes: (address: FilAddress | string) => Buffer;
    addressToString: (address: FilAddress | string) => string;
    /**
     * See [[LockChain.transactionID]].
     */
    transactionID: (transaction: FilTransaction) => string;
    transactionIDFromRPCFormat: (txid: string | Buffer, _txindex: string) => string;
    transactionFromRPCFormat: (txid: string | Buffer, _txindex: string) => Promise<FilTransaction>;
    /**
     * @deprecated Renamed to `transactionFromRPCFormat`.
     * Will be removed in 3.0.0.
     */
    transactionFromID: (txid: string | Buffer, _txindex: string) => Promise<FilTransaction>;
    depositV1HashString: (_deposit: FilDeposit) => string;
    transactionRPCFormat: (transaction: FilTransaction, v2?: boolean | undefined) => {
        txid: Buffer;
        txindex: string;
    };
    transactionRPCTxidFromID: (transactionID: string) => Buffer;
    getBurnPayload: ((bytes?: boolean) => string) | undefined;
    /** @category Main */
    Address: (address: string) => this;
    burnPayload?: ((config?: BurnPayloadConfig | undefined) => string | undefined) | undefined;
}
export declare type Filecoin = FilecoinClass;
export declare const Filecoin: import("@renproject/utils").CallableConstructor<typeof FilecoinClass>;
export {};

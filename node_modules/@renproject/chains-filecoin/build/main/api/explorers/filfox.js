"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Filfox = void 0;
const utils_1 = require("@renproject/utils");
const axios_1 = __importDefault(require("axios"));
const FILFOX_URL = "https://filfox.info/api/v1/";
class Filfox {
    constructor(network = "mainnet") {
        this.fetchDeposits = async (address, paramsFilterBase64 = undefined, page = 0, size = 100) => {
            const heightURL = `${FILFOX_URL}tipset/recent?count=1`;
            const heightResponse = (await axios_1.default.get(heightURL, {
                timeout: 60 * utils_1.SECONDS,
            })).data;
            if (!Array.isArray(heightResponse)) {
                throw new Error(`Unable to fetch latest Filecoin height: ${heightResponse.error}`);
            }
            const height = heightResponse[0].height;
            const messagesURL = `${FILFOX_URL}address/${address}/messages?pageSize=${size}&page=${page}&detailed`;
            const messagesResponse = (await axios_1.default.get(messagesURL, {
                timeout: 60 * utils_1.SECONDS,
            })).data;
            if (messagesResponse.error !== undefined) {
                throw new Error(`Unable to fetch Filecoin messages: ${messagesResponse.error}`);
            }
            const { messages, totalCount } = messagesResponse;
            return {
                deposits: messages
                    .filter((message) => message.to === address)
                    .map((message) => {
                    return {
                        cid: message.cid,
                        // to: message.to,
                        amount: message.value,
                        params: message.params,
                        confirmations: height - message.height,
                        nonce: message.nonce,
                    };
                })
                    .filter((message) => paramsFilterBase64 === undefined ||
                    paramsFilterBase64 === null ||
                    message.params === paramsFilterBase64),
                totalCount,
            };
        };
        this.fetchMessage = async (cid) => {
            const messagesURL = `${FILFOX_URL}message/${cid}`;
            const message = (await axios_1.default.get(messagesURL, {
                timeout: 60 * utils_1.SECONDS,
            })).data;
            if (message.error !== undefined && message.error !== "") {
                throw new Error(`Unable to fetch Filecoin messages: ${String(message.error)}`);
            }
            return {
                cid: message.cid,
                // to: message.to,
                amount: message.value,
                params: message.params,
                confirmations: message.confirmations,
                nonce: message.nonce,
            };
        };
        if (network !== "mainnet") {
            throw new Error(`Network ${network} not supported by Filscan.`);
        }
    }
}
exports.Filfox = Filfox;
//# sourceMappingURL=filfox.js.map
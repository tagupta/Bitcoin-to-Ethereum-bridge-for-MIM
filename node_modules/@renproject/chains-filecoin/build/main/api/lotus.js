"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchMessage = exports.fetchDeposits = exports.getHeight = void 0;
const getHeight = async (client) => {
    const chainHead = await client.request("ChainHead");
    return chainHead.Height;
};
exports.getHeight = getHeight;
const fetchDeposits = async (client, address, params, network, fromHeight, latestHeight) => {
    const latestTXs = await client.request("StateListMessages", {
        Version: 0,
        To: address,
        From: null,
        Nonce: 0,
        Value: "0",
        GasPrice: "0",
        GasLimit: 0,
        Method: 0,
        Params: params,
    }, [], fromHeight);
    return await Promise.all((latestTXs || []).map(async (cid) => exports.fetchMessage(client, cid["/"], network, latestHeight)));
};
exports.fetchDeposits = fetchDeposits;
const fetchMessage = async (client, cid, network, height) => {
    const [details, receipt, { Height: chainHeight }] = await Promise.all([
        client.request("ChainGetMessage", { "/": cid }),
        client.request("StateSearchMsg", { "/": cid }).catch(() => undefined),
        height ? { Height: height } : client.request("ChainHead"),
    ]);
    if (network === "testnet") {
        details.To = details.To.replace(/^f/, "t");
        details.From = details.From.replace(/^f/, "t");
    }
    const tx = {
        cid,
        amount: details.Value,
        params: details.Params || "",
        nonce: details.Nonce,
        confirmations: receipt ? chainHeight - receipt.Height : 0,
    };
    return tx;
};
exports.fetchMessage = fetchMessage;
//# sourceMappingURL=lotus.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Avalanche = exports.AvalancheClass = exports.AvalancheConfigMap = exports.renAvalancheMainnet = exports.renAvalancheTestnet = void 0;
const interfaces_1 = require("@renproject/interfaces");
const utils_1 = require("@renproject/utils");
const ethereum_1 = require("./ethereum");
const networks_1 = require("./networks");
const utils_2 = require("./utils");
exports.renAvalancheTestnet = {
    name: "Avalanche Testnet",
    chain: "avalancheTestnet",
    isTestnet: true,
    chainLabel: "Avalanche Testnet",
    networkID: 80001,
    addresses: {
        GatewayRegistry: "0xD881213F5ABF783d93220e6bD3Cc21706A8dc1fC",
        BasicAdapter: "0xD087b0540e172553c12DEEeCDEf3dFD21Ec02066",
    },
    publicProvider: () => `https://api.avax-test.network/ext/bc/C/rpc`,
    explorer: networks_1.StandardExplorer("https://cchain.explorer.avax-test.network"),
    /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */
    infura: "https://api.avax-test.network/ext/bc/C/rpc",
    /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */
    etherscan: "https://cchain.explorer.avax-test.network",
};
exports.renAvalancheMainnet = {
    name: "Avalanche Mainnet",
    chain: "avalancheMainnet",
    isTestnet: false,
    chainLabel: "Avalanche Mainnet",
    networkID: 137,
    addresses: {
        GatewayRegistry: "0x21C482f153D0317fe85C60bE1F7fa079019fcEbD",
        BasicAdapter: "0xAC23817f7E9Ec7EB6B7889BDd2b50e04a44470c5",
    },
    publicProvider: () => `https://api.avax.network/ext/bc/C/rpc`,
    explorer: networks_1.StandardExplorer("https://cchain.explorer.avax.network"),
    /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */
    infura: "https://api.avax.network/ext/bc/C/rpc",
    /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */
    etherscan: "https://cchain.explorer.avax.network",
};
exports.AvalancheConfigMap = {
    [interfaces_1.RenNetwork.Testnet]: exports.renAvalancheTestnet,
    [interfaces_1.RenNetwork.Mainnet]: exports.renAvalancheMainnet,
};
const resolveAvalancheNetwork = (renNetwork) => {
    if (!renNetwork) {
        return exports.AvalancheConfigMap[interfaces_1.RenNetwork.Mainnet];
    }
    if (renNetwork.addresses) {
        return renNetwork;
    }
    else {
        const details = interfaces_1.getRenNetworkDetails(
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
        renNetwork);
        return details.isTestnet ? exports.renAvalancheTestnet : exports.renAvalancheMainnet;
    }
};
class AvalancheClass extends ethereum_1.EthereumClass {
    constructor(web3Provider, renNetwork, config = {}) {
        // To be compatible with the Ethereum chain class, the first parameter
        // is a web3Provider and the second the RenVM network.
        super(web3Provider, resolveAvalancheNetwork(renNetwork), config);
        this.chain = AvalancheClass.chain;
        this.name = AvalancheClass.chain;
        this.legacyName = undefined;
        this.configMap = exports.AvalancheConfigMap;
        this.utils = utils_1.utilsWithChainNetwork(AvalancheClass.utils, () => this.renNetworkDetails);
        this.initialize = (renNetwork) => {
            this.renNetworkDetails =
                this.renNetworkDetails ||
                    exports.AvalancheConfigMap[interfaces_1.getRenNetworkDetails(renNetwork).name];
            if (!this.renNetworkDetails) {
                throw new Error(`Unable to set ${this.name} network for RenVM network ${interfaces_1.getRenNetworkDetails(renNetwork).name}. Please provide ${this.name} network details to ${this.name} constructor.`);
            }
            return this;
        };
    }
}
exports.AvalancheClass = AvalancheClass;
AvalancheClass.chain = "Avalanche";
// public logRequestLimit = 1000;
AvalancheClass.configMap = exports.AvalancheConfigMap;
AvalancheClass.utils = {
    resolveChainNetwork: resolveAvalancheNetwork,
    addressIsValid: utils_2.addressIsValid,
    transactionIsValid: utils_2.transactionIsValid,
    addressExplorerLink: (address, network) => `${(exports.Avalanche.utils.resolveChainNetwork(network) ||
        exports.renAvalancheMainnet).etherscan}/address/${address}`,
    transactionExplorerLink: (transaction, network) => `${(exports.Avalanche.utils.resolveChainNetwork(network) ||
        exports.renAvalancheMainnet).etherscan}/tx/${transaction || ""}`,
};
// @dev Removes any static fields, except `utils`.
exports.Avalanche = utils_1.Callable(AvalancheClass);
//# sourceMappingURL=avalanche.js.map
import { Logger, RenNetwork, RenNetworkDetails, RenNetworkString } from "@renproject/interfaces";
import { NetworkInput } from "./base";
import { EthAddress, EthProvider, EthTransaction } from "./types";
import { EthereumClass } from "./ethereum";
import { EthereumConfig } from "./networks";
export declare const renFantomTestnet: EthereumConfig;
export declare const renFantomDevnet: EthereumConfig;
export declare const renFantomMainnet: EthereumConfig;
export declare const FantomConfigMap: {
    testnet: EthereumConfig;
    mainnet: EthereumConfig;
    devnet: EthereumConfig;
};
export declare class FantomClass extends EthereumClass {
    static chain: string;
    chain: string;
    name: string;
    legacyName: undefined;
    static configMap: {
        testnet: EthereumConfig;
        mainnet: EthereumConfig;
        devnet: EthereumConfig;
    };
    configMap: {
        testnet: EthereumConfig;
        mainnet: EthereumConfig;
        devnet: EthereumConfig;
    };
    static utils: {
        resolveChainNetwork: (renNetwork?: RenNetworkDetails | RenNetwork | RenNetworkString | EthereumConfig | undefined) => EthereumConfig;
        addressIsValid: (address: string) => boolean;
        transactionIsValid: (transaction: EthTransaction) => boolean;
        addressExplorerLink: (address: EthAddress, network?: NetworkInput | undefined) => string;
        transactionExplorerLink: (transaction: EthTransaction, network?: NetworkInput | undefined) => string;
    };
    utils: {
        resolveChainNetwork: (renNetwork?: RenNetworkDetails | RenNetwork | RenNetworkString | EthereumConfig | undefined) => EthereumConfig;
        addressIsValid: (address: string) => boolean;
        transactionIsValid: (transaction: EthTransaction) => boolean;
        addressExplorerLink: (address: EthAddress, network?: NetworkInput | undefined) => string;
        transactionExplorerLink: (transaction: EthTransaction, network?: NetworkInput | undefined) => string;
    } & {
        addressIsValid: (address: string, network?: "mainnet" | "testnet" | EthereumConfig | undefined) => boolean;
        addressExplorerLink: ((address: any, network?: "mainnet" | "testnet" | EthereumConfig | undefined) => string | undefined) | undefined;
        transactionExplorerLink: ((tx: any, network?: "mainnet" | "testnet" | EthereumConfig | undefined) => string | undefined) | undefined; /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */
    };
    constructor(web3Provider: EthProvider, renNetwork: RenNetwork | RenNetworkString | RenNetworkDetails | EthereumConfig, config?: {
        logger?: Logger;
    });
    initialize: (renNetwork: RenNetwork | RenNetworkString | RenNetworkDetails) => this;
}
export declare type Fantom = FantomClass;
export declare const Fantom: import("@renproject/utils").CallableConstructor<typeof FantomClass>;

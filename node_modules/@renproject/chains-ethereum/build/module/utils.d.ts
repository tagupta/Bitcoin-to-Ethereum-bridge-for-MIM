/// <reference types="node" />
import { BurnDetails, ContractCall, EventEmitterTyped, LockAndMintTransaction, Logger } from "@renproject/interfaces";
import { EthAddress, EthTransaction } from "./types";
import { Provider, TransactionReceipt } from "@ethersproject/providers";
import { Overrides } from "ethers";
import * as ethers from "ethers";
import { EthereumConfig } from "./networks";
export interface EthereumTransactionConfig extends Overrides {
    value?: ethers.BigNumberish | Promise<ethers.BigNumberish>;
}
/**
 * eventTopics contains the Ethereum event identifiers (the first log topic) for
 * Gateway contract events.
 */
export declare const eventTopics: {
    /**
     * ```js
     * event LogBurn(
     *     bytes _to,
     *     uint256 _amount,
     *     uint256 indexed _n,
     *     bytes indexed _indexedTo
     *  );
     * ```
     */
    LogBurn: string;
    /**
     * ```js
     * event LogMint(
     *     address indexed _to,
     *     uint256 _amount,
     *     uint256 indexed _n,
     *     bytes32 indexed _signedMessageHash
     * );
     * ```
     */
    LogMint: string;
};
/**
 * Waits for the receipt of a transaction to be available, retrying every 3
 * seconds until it is.
 *
 * @param web3 A web3 instance.
 * @param txHash The hash of the transaction being read.
 */
export declare const waitForReceipt: (provider: Provider, txHash: string, logger?: Logger | undefined, timeout?: number | undefined) => Promise<TransactionReceipt>;
export declare const parseBurnEvent: (event: {
    transactionHash: string;
    topics: string[];
    data: string;
}) => BurnDetails<EthTransaction>;
export declare const extractBurnDetails: (provider: Provider, txHash: string, logger?: Logger | undefined, timeout?: number | undefined) => Promise<BurnDetails<EthTransaction>>;
export declare const getGatewayAddress: (network: EthereumConfig, provider: Provider, asset: string) => Promise<string>;
export declare const findBurnByNonce: (network: EthereumConfig, provider: Provider, asset: string, nonce: Buffer | string | number) => Promise<BurnDetails<EthTransaction>>;
export declare const getTokenAddress: (network: EthereumConfig, provider: Provider, asset: string) => Promise<string>;
export declare const findMintBySigHash: (network: EthereumConfig, provider: Provider, asset: string, nHash: Buffer, sigHash?: Buffer | undefined, blockLimit?: number | undefined) => Promise<string | undefined>;
export declare const submitToEthereum: (signer: ethers.Signer, contractCalls: ContractCall[], mintTx: LockAndMintTransaction, eventEmitter: EventEmitterTyped<{
    transactionHash: [string];
    confirmation: [number, {
        status: number;
    }];
}>, logger?: Logger) => Promise<EthTransaction>;
export declare const addressIsValid: (address: EthAddress) => boolean;
export declare const transactionIsValid: (transaction: EthTransaction) => boolean;

import { EthAddress, EthTransaction } from "./types";
export declare const StandardExplorer: (baseUrl: string) => {
    address: (address: EthAddress | string) => string;
    transaction: (transaction: EthTransaction | string) => string;
};
export interface EthereumConfig {
    name: string;
    chain: string;
    isTestnet: boolean;
    networkID: number;
    /** A title-cased label for the chain. */
    chainLabel: string;
    /**
     * A method for getting a public provider as a URI. Accepts an optional
     * map of provider API keys, as documented by each network.
     *
     * Note that this isn't used by RenJS internally.
     */
    publicProvider: (keys?: {
        infura?: string;
        [key: string]: string | undefined;
    }) => string;
    /**
     * The base URI of an explorer, which should follow the below standard:
     * (1) an address's page should be at $BASE_URL/address/$ADDRESS
     * (2) a transaction's page should be ase $BASE_URL/tx/$TRANSACTION_HASH
     *
     * Used when calling `Ethereum.utils.addressExplorerLink` and
     * `Ethereum.utils.transactionExplorerLink`.
     */
    explorer: {
        address: (address: EthAddress | string) => string;
        transaction: (transaction: EthTransaction | string) => string;
    };
    addresses: {
        GatewayRegistry: string;
        BasicAdapter: string;
    };
    /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */
    infura: string;
    /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */
    etherscan: string;
}
export declare const renMainnet: EthereumConfig;
export declare const renTestnet: EthereumConfig;
export declare const renDevnet: EthereumConfig;
export declare const renTestnetVDot3: EthereumConfig;
export declare const renMainnetVDot3: EthereumConfig;
export declare const renDevnetVDot3: EthereumConfig;

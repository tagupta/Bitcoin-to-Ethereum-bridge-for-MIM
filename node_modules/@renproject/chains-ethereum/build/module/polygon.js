import { getRenNetworkDetails, RenNetwork, } from "@renproject/interfaces";
import { Callable, utilsWithChainNetwork } from "@renproject/utils";
import { EthereumClass } from "./ethereum";
import { StandardExplorer } from "./networks";
import { addressIsValid, transactionIsValid } from "./utils";
export const renPolygonTestnet = {
    name: "Polygon Testnet",
    chain: "polygonTestnet",
    isTestnet: true,
    chainLabel: "Polygon Testnet",
    networkID: 80001,
    addresses: {
        GatewayRegistry: "0xD881213F5ABF783d93220e6bD3Cc21706A8dc1fC",
        BasicAdapter: "0xD087b0540e172553c12DEEeCDEf3dFD21Ec02066",
    },
    publicProvider: () => `https://rpc-mumbai.maticvigil.com`,
    explorer: StandardExplorer("https://mumbai.polygonscan.com"),
    /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */
    infura: "https://rpc-mumbai.maticvigil.com",
    /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */
    etherscan: "https://mumbai.polygonscan.com/",
};
export const renPolygonMainnet = {
    name: "Polygon Mainnet",
    chain: "polygonMainnet",
    isTestnet: false,
    chainLabel: "Polygon Mainnet",
    networkID: 137,
    addresses: {
        GatewayRegistry: "0x21C482f153D0317fe85C60bE1F7fa079019fcEbD",
        BasicAdapter: "0xAC23817f7E9Ec7EB6B7889BDd2b50e04a44470c5",
    },
    publicProvider: () => `https://rpc-mainnet.maticvigil.com`,
    explorer: StandardExplorer("https://polygonscan.com"),
    /** @deprecated Renamed to publicProvider. Will be removed in 3.0.0. */
    infura: "https://rpc-mainnet.maticvigil.com",
    /** @deprecated Renamed to explorer. Will be removed in 3.0.0. */
    etherscan: "https://polygonscan.com",
};
export const PolygonConfigMap = {
    [RenNetwork.Testnet]: renPolygonTestnet,
    [RenNetwork.Mainnet]: renPolygonMainnet,
};
const resolvePolygonNetwork = (renNetwork) => {
    if (!renNetwork) {
        return PolygonConfigMap[RenNetwork.Mainnet];
    }
    if (renNetwork.addresses) {
        return renNetwork;
    }
    else {
        const details = getRenNetworkDetails(
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
        renNetwork);
        return details.isTestnet ? renPolygonTestnet : renPolygonMainnet;
    }
};
export class PolygonClass extends EthereumClass {
    constructor(web3Provider, renNetwork, config = {}) {
        // To be compatible with the Ethereum chain class, the first parameter
        // is a web3Provider and the second the RenVM network.
        super(web3Provider, resolvePolygonNetwork(renNetwork), config);
        this.chain = PolygonClass.chain;
        this.name = PolygonClass.chain;
        this.legacyName = undefined;
        this.logRequestLimit = 1000;
        this.configMap = PolygonConfigMap;
        this.utils = utilsWithChainNetwork(PolygonClass.utils, () => this.renNetworkDetails);
        this.initialize = (renNetwork) => {
            this.renNetworkDetails =
                this.renNetworkDetails ||
                    PolygonConfigMap[getRenNetworkDetails(renNetwork).name];
            if (!this.renNetworkDetails) {
                throw new Error(`Unable to set ${this.name} network for RenVM network ${getRenNetworkDetails(renNetwork).name}. Please provide ${this.name} network details to ${this.name} constructor.`);
            }
            return this;
        };
    }
}
PolygonClass.chain = "Polygon";
PolygonClass.configMap = PolygonConfigMap;
PolygonClass.utils = {
    resolveChainNetwork: resolvePolygonNetwork,
    addressIsValid,
    transactionIsValid,
    addressExplorerLink: (address, network) => `${(Polygon.utils.resolveChainNetwork(network) ||
        renPolygonMainnet).etherscan}/address/${address}`,
    transactionExplorerLink: (transaction, network) => `${(Polygon.utils.resolveChainNetwork(network) ||
        renPolygonMainnet).etherscan}/tx/${transaction || ""}`,
};
// @dev Removes any static fields, except `utils`.
export const Polygon = Callable(PolygonClass);
//# sourceMappingURL=polygon.js.map
import { UTXO, BitcoinAPI } from "./API";
export declare enum SoChainNetwork {
    BTC = "BTC",
    LTC = "LTC",
    ZEC = "ZEC",
    DOGE = "DOGE",
    DASH = "DASH",
    BTCTEST = "BTCTEST",
    LTCTEST = "LTCTEST",
    ZECTEST = "ZECTEST",
    DOGETEST = "DOGETEST",
    DASHTEST = "DASHTEST"
}
export declare class SoChainClass implements BitcoinAPI {
    network: string;
    constructor(network?: SoChainNetwork | string);
    fetchUTXO: (txHash: string, vOut: number) => Promise<UTXO>;
    fetchUTXOs: (address: string, confirmations?: number) => Promise<UTXO[]>;
    fetchTXs: (address: string, confirmations?: number) => Promise<UTXO[]>;
    broadcastTransaction: (txHex: string) => Promise<string>;
}
export declare type SoChain = SoChainClass;
export declare const SoChain: import("@renproject/utils").CallableConstructor<typeof SoChainClass>;
export interface SoChainUTXO {
    txid: string;
    value: number;
    script_asm: string;
    script_hex: string;
    output_no: number;
    confirmations: number;
    time: number;
}
export interface SoChainTX {
    network: string;
    txid: string;
    blockhash: string | null;
    confirmations: number;
    time: number;
    inputs: Array<{
        input_no: number;
        value: string;
        address: string;
        type: "pubkeyhash";
        script: string;
        witness: null;
        from_output: {
            txid: string;
            output_no: number;
        };
    }>;
    outputs: Array<{
        output_no: 0;
        value: string;
        address: string;
        type: "pubkeyhash";
        script: string;
    }>;
    tx_hex: string;
    size: number;
    version: 1;
    locktime: 0;
}

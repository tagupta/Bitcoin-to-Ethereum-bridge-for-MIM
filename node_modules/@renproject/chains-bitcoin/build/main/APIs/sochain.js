"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoChain = exports.SoChainClass = exports.SoChainNetwork = void 0;
const utils_1 = require("@renproject/utils");
const axios_1 = __importDefault(require("axios"));
const API_1 = require("./API");
var SoChainNetwork;
(function (SoChainNetwork) {
    SoChainNetwork["BTC"] = "BTC";
    SoChainNetwork["LTC"] = "LTC";
    SoChainNetwork["ZEC"] = "ZEC";
    SoChainNetwork["DOGE"] = "DOGE";
    SoChainNetwork["DASH"] = "DASH";
    SoChainNetwork["BTCTEST"] = "BTCTEST";
    SoChainNetwork["LTCTEST"] = "LTCTEST";
    SoChainNetwork["ZECTEST"] = "ZECTEST";
    SoChainNetwork["DOGETEST"] = "DOGETEST";
    SoChainNetwork["DASHTEST"] = "DASHTEST";
})(SoChainNetwork = exports.SoChainNetwork || (exports.SoChainNetwork = {}));
class SoChainClass {
    constructor(network = SoChainNetwork.BTC) {
        this.fetchUTXO = async (txHash, vOut) => {
            const url = `https://sochain.com/api/v2/get_tx/${this.network}/${txHash}`;
            const response = await axios_1.default.get(url, { timeout: API_1.DEFAULT_TIMEOUT });
            const tx = response.data.data;
            return API_1.fixUTXO({
                txHash: tx.txid,
                amount: tx.outputs[vOut].value.toString(),
                vOut,
                confirmations: tx.confirmations,
            }, 8);
        };
        this.fetchUTXOs = async (address, confirmations = 0) => {
            const url = `https://sochain.com/api/v2/get_tx_unspent/${this.network}/${address}/${confirmations}`;
            const response = await axios_1.default.get(url, { timeout: API_1.DEFAULT_TIMEOUT });
            return API_1.fixUTXOs(response.data.data.txs.map((utxo) => ({
                txHash: utxo.txid,
                amount: utxo.value.toString(),
                // scriptPubKey: utxo.script_hex,
                vOut: utxo.output_no,
                confirmations: utxo.confirmations,
            })), 8)
                .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations)
                .sort(API_1.sortUTXOs);
        };
        this.fetchTXs = async (address, confirmations = 0) => {
            const url = `https://sochain.com/api/v2/get_tx_received/${this.network}/${address}/${confirmations}`;
            const response = await axios_1.default.get(url, { timeout: API_1.DEFAULT_TIMEOUT });
            return API_1.fixUTXOs(response.data.data.txs.map((utxo) => ({
                txHash: utxo.txid,
                amount: utxo.value.toString(),
                // scriptPubKey: utxo.script_hex,
                vOut: utxo.output_no,
                confirmations: utxo.confirmations,
            })), 8)
                .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations)
                .sort(API_1.sortUTXOs);
        };
        this.broadcastTransaction = async (txHex) => {
            const response = await axios_1.default.post(`https://sochain.com/api/v2/send_tx/${this.network}`, { tx_hex: txHex }, { timeout: API_1.DEFAULT_TIMEOUT });
            return response.data.data.txid;
        };
        this.network = network;
    }
}
exports.SoChainClass = SoChainClass;
exports.SoChain = utils_1.Callable(SoChainClass);
//# sourceMappingURL=sochain.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Blockchair = exports.BlockchairClass = exports.BlockchairNetwork = void 0;
const utils_1 = require("@renproject/utils");
const axios_1 = __importDefault(require("axios"));
const API_1 = require("./API");
var BlockchairNetwork;
(function (BlockchairNetwork) {
    BlockchairNetwork["BITCOIN"] = "bitcoin";
    BlockchairNetwork["BITCOIN_CASH"] = "bitcoin-cash";
    BlockchairNetwork["LITECOIN"] = "litecoin";
    BlockchairNetwork["BITCOIN_SV"] = "bitcoin-sv";
    BlockchairNetwork["DOGECOIN"] = "dogecoin";
    BlockchairNetwork["DASH"] = "dash";
    BlockchairNetwork["GROESTLCOIN"] = "groestlcoin";
    BlockchairNetwork["BITCOIN_TESTNET"] = "bitcoin/testnet";
})(BlockchairNetwork = exports.BlockchairNetwork || (exports.BlockchairNetwork = {}));
class BlockchairClass {
    constructor(network = BlockchairNetwork.BITCOIN) {
        this.endpoint = () => `https://api.blockchair.com/${this.network}`;
        this.fetchUTXO = async (txHash, vOut) => {
            const url = `${this.endpoint()}/dashboards/transaction/${txHash}`;
            const response = (await axios_1.default.get(`${url}`, {
                timeout: API_1.DEFAULT_TIMEOUT,
            })).data;
            if (!response.data[txHash]) {
                throw new Error(`Transaction not found.`);
            }
            const tx = response.data[txHash];
            let latestBlock = response.context.state;
            if (latestBlock === 0) {
                const statsUrl = `${this.endpoint()}/stats`;
                const statsResponse = (await axios_1.default.get(statsUrl, { timeout: API_1.DEFAULT_TIMEOUT })).data;
                latestBlock = statsResponse.data.blocks - 1;
            }
            const confirmations = tx.transaction.block_id === -1
                ? 0
                : Math.max(latestBlock - tx.transaction.block_id + 1, 0);
            return {
                txHash,
                vOut,
                amount: tx.outputs[vOut].value.toString(),
                confirmations,
            };
        };
        this.fetchUTXOs = async (address, confirmations = 0) => {
            const url = `${this.endpoint()}/dashboards/address/${address}?limit=0,100`;
            const response = (await axios_1.default.get(url, { timeout: API_1.DEFAULT_TIMEOUT })).data;
            let latestBlock = response.context.state;
            if (latestBlock === 0) {
                const statsUrl = `${this.endpoint()}/stats`;
                const statsResponse = (await axios_1.default.get(statsUrl, { timeout: API_1.DEFAULT_TIMEOUT })).data;
                latestBlock = statsResponse.data.blocks - 1;
            }
            return response.data[address].utxo
                .map((utxo) => ({
                txHash: utxo.transaction_hash,
                amount: utxo.value.toString(),
                vOut: utxo.index,
                confirmations: utxo.block_id === -1 ? 0 : latestBlock - utxo.block_id + 1,
            }))
                .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations)
                .sort(API_1.sortUTXOs);
        };
        this.fetchTXs = async (address, confirmations = 0, limit = 25) => {
            const url = `${this.endpoint()}/dashboards/address/${address}?limit=${limit},0`;
            const response = (await axios_1.default.get(url, { timeout: API_1.DEFAULT_TIMEOUT })).data;
            let latestBlock = response.context.state;
            if (latestBlock === 0) {
                const statsUrl = `${this.endpoint()}/stats`;
                const statsResponse = (await axios_1.default.get(statsUrl, { timeout: API_1.DEFAULT_TIMEOUT })).data;
                latestBlock = statsResponse.data.blocks - 1;
            }
            const txHashes = response.data[address].transactions;
            let txDetails = {};
            // Fetch in sets of 10
            for (let i = 0; i < Math.ceil(txHashes.length / 10); i++) {
                const txUrl = `${this.endpoint()}/dashboards/transactions/${txHashes
                    .slice(i * 10, (i + 1) * 10)
                    .join(",")}`;
                const txResponse = (await axios_1.default.get(txUrl, {
                    timeout: API_1.DEFAULT_TIMEOUT,
                })).data;
                txDetails = Object.assign(Object.assign({}, txDetails), txResponse.data);
            }
            const received = [];
            for (const txHash of txHashes) {
                const tx = txDetails[txHash];
                const txConfirmations = tx.transaction.block_id === -1
                    ? 0
                    : Math.max(latestBlock - tx.transaction.block_id + 1, 0);
                for (let i = 0; i < tx.outputs.length; i++) {
                    const output = tx.outputs[i];
                    if (output.recipient === address) {
                        received.push({
                            txHash: tx.transaction.hash,
                            amount: output.value.toString(),
                            vOut: i,
                            confirmations: txConfirmations,
                        });
                    }
                }
            }
            return received
                .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations)
                .sort(API_1.sortUTXOs);
        };
        this.broadcastTransaction = async (txHex) => {
            const url = `${this.endpoint()}/push/transaction`;
            const response = await axios_1.default.post(url, { data: txHex }, { timeout: API_1.DEFAULT_TIMEOUT });
            if (response.data.error) {
                throw new Error(response.data.error);
            }
            return response.data.data.transaction_hash;
        };
        this.network = network;
    }
}
exports.BlockchairClass = BlockchairClass;
exports.Blockchair = utils_1.Callable(BlockchairClass);
//# sourceMappingURL=blockchair.js.map
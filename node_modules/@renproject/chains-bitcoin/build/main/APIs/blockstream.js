"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Blockstream = exports.BlockstreamClass = void 0;
const utils_1 = require("@renproject/utils");
const axios_1 = __importDefault(require("axios"));
const API_1 = require("./API");
class BlockstreamClass {
    constructor({ testnet = false, apiKey = undefined } = {}) {
        this.getAPIUrl = (path) => `https://blockstream.info/${this.testnet ? "testnet/" : ""}api${path}${this.apiKey ? `?key=${this.apiKey}` : ""}`;
        this.fetchUTXO = async (txHash, vOut) => {
            const utxo = (await axios_1.default.get(this.getAPIUrl(`/tx/${txHash}`), {
                timeout: API_1.DEFAULT_TIMEOUT,
            })).data;
            const heightResponse = (await axios_1.default.get(this.getAPIUrl(`/blocks/tip/height`), {
                timeout: API_1.DEFAULT_TIMEOUT,
            })).data;
            const confirmations = utxo.status.confirmed
                ? Math.max(1 + parseInt(heightResponse, 10) - utxo.status.block_height, 0)
                : 0;
            return {
                txHash,
                amount: utxo.vout[vOut].value.toString(),
                vOut,
                confirmations,
            };
        };
        this.fetchUTXOs = async (address, confirmations = 0) => {
            const response = await axios_1.default.get(this.getAPIUrl(`/address/${address}/utxo`), { timeout: API_1.DEFAULT_TIMEOUT });
            const heightResponse = await axios_1.default.get(this.getAPIUrl(`/blocks/tip/height`), { timeout: API_1.DEFAULT_TIMEOUT });
            return response.data
                .map((utxo) => ({
                txHash: utxo.txid,
                amount: utxo.value.toString(),
                vOut: utxo.vout,
                confirmations: utxo.status.confirmed
                    ? 1 +
                        parseInt(heightResponse.data, 10) -
                        utxo.status.block_height
                    : 0,
            }))
                .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations)
                .sort(API_1.sortUTXOs);
        };
        this.fetchTXs = async (address, confirmations = 0) => {
            const response = await axios_1.default.get(this.getAPIUrl(`/address/${address}/txs`), { timeout: API_1.DEFAULT_TIMEOUT });
            const heightResponse = await axios_1.default.get(this.getAPIUrl(`/blocks/tip/height`), { timeout: API_1.DEFAULT_TIMEOUT });
            const received = [];
            for (const tx of response.data) {
                for (let i = 0; i < tx.vout.length; i++) {
                    const vout = tx.vout[i];
                    if (vout.scriptpubkey_address === address) {
                        received.push({
                            txHash: tx.txid,
                            amount: vout.value.toString(),
                            vOut: i,
                            confirmations: tx.status.confirmed
                                ? 1 +
                                    parseInt(heightResponse.data, 10) -
                                    tx.status.block_height
                                : 0,
                        });
                    }
                }
            }
            return received
                .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations)
                .sort(API_1.sortUTXOs);
        };
        this.broadcastTransaction = async (txHex) => {
            const response = await axios_1.default.post(this.getAPIUrl(`/tx`), txHex, {
                timeout: API_1.DEFAULT_TIMEOUT,
            });
            return response.data;
        };
        this.testnet = testnet;
        this.apiKey = apiKey;
    }
}
exports.BlockstreamClass = BlockstreamClass;
exports.Blockstream = utils_1.Callable(BlockstreamClass);
//# sourceMappingURL=blockstream.js.map
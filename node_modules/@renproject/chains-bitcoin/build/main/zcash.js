"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Zcash = exports.ZcashClass = void 0;
const utils_1 = require("@renproject/utils");
const bs58_1 = __importDefault(require("bs58"));
const insight_1 = require("./APIs/insight");
const sochain_1 = require("./APIs/sochain");
const bitcoin_1 = require("./bitcoin");
const utils_2 = require("./utils");
var InsightEndpoints;
(function (InsightEndpoints) {
    // Testnet
    InsightEndpoints["TestnetZCash"] = "https://explorer.testnet.z.cash/api/";
    // Mainnet
    InsightEndpoints["ZCash"] = "https://explorer.z.cash/api/";
    InsightEndpoints["ZecBlockExplorer"] = "https://zecblockexplorer.com/api/";
    InsightEndpoints["ZecChain"] = "https://zechain.net/api/v1/";
    InsightEndpoints["BlockExplorer"] = "https://zcash.blockexplorer.com/api/";
})(InsightEndpoints || (InsightEndpoints = {}));
class ZcashClass extends bitcoin_1.BitcoinClass {
    constructor() {
        super(...arguments);
        this.chain = ZcashClass.chain;
        this.name = ZcashClass.chain;
        this.legacyName = "Zec";
        this.withDefaultAPIs = (network) => {
            switch (network) {
                case "mainnet":
                    // prettier-ignore
                    return this
                        .withAPI(insight_1.Insight(InsightEndpoints.ZCash))
                        .withAPI(insight_1.Insight(InsightEndpoints.ZecBlockExplorer))
                        .withAPI(insight_1.Insight(InsightEndpoints.ZecChain))
                        .withAPI(insight_1.Insight(InsightEndpoints.BlockExplorer))
                        .withAPI(sochain_1.SoChain(sochain_1.SoChainNetwork.ZEC), { priority: 15 });
                case "testnet":
                    // prettier-ignore
                    return this
                        .withAPI(insight_1.Insight(InsightEndpoints.TestnetZCash))
                        .withAPI(sochain_1.SoChain(sochain_1.SoChainNetwork.ZECTEST), { priority: 15 });
                case "regtest":
                    throw new Error(`Regtest is currently not supported.`);
            }
        };
        this.asset = "ZEC";
        this.utils = utils_1.utilsWithChainNetwork(exports.Zcash.utils, () => this.chainNetwork);
    }
}
exports.ZcashClass = ZcashClass;
ZcashClass.chain = "Zcash";
ZcashClass.asset = "ZEC";
ZcashClass.utils = {
    resolveChainNetwork: bitcoin_1.BitcoinClass.utils.resolveChainNetwork,
    p2shPrefix: {
        mainnet: Buffer.from([0x1c, 0xbd]),
        testnet: Buffer.from([0x1c, 0xba]),
    },
    addressBufferToString: bs58_1.default.encode,
    addressIsValid: (address, network = "mainnet") => utils_2.validateAddress(address, ZcashClass.asset, exports.Zcash.utils.resolveChainNetwork(network)),
    transactionIsValid: (transaction, _network = "mainnet") => utils_1.isHex(typeof transaction === "string"
        ? transaction
        : transaction.txHash, { length: 32 }),
    addressExplorerLink: (address, network = "mainnet") => {
        switch (exports.Zcash.utils.resolveChainNetwork(network)) {
            case "mainnet":
                return `https://sochain.com/address/ZEC/${address}/`;
            case "testnet":
                return `https://sochain.com/address/ZECTEST/${address}/`;
            case "regtest":
                return undefined;
        }
    },
    transactionExplorerLink: (tx, network = "mainnet") => {
        const txHash = typeof tx === "string" ? tx : tx.txHash;
        switch (exports.Zcash.utils.resolveChainNetwork(network)) {
            case "mainnet":
                return `https://sochain.com/tx/ZEC/${txHash}/`;
            case "testnet":
                return `https://sochain.com/tx/ZECTEST/${txHash}/`;
            case "regtest":
                return undefined;
        }
    },
};
exports.Zcash = utils_1.Callable(ZcashClass);
const _ = exports.Zcash;
//# sourceMappingURL=zcash.js.map
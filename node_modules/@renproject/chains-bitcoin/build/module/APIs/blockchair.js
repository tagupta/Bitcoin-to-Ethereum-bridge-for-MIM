var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Callable } from "@renproject/utils";
import axios from "axios";
import { sortUTXOs, DEFAULT_TIMEOUT } from "./API";
export var BlockchairNetwork;
(function (BlockchairNetwork) {
    BlockchairNetwork["BITCOIN"] = "bitcoin";
    BlockchairNetwork["BITCOIN_CASH"] = "bitcoin-cash";
    BlockchairNetwork["LITECOIN"] = "litecoin";
    BlockchairNetwork["BITCOIN_SV"] = "bitcoin-sv";
    BlockchairNetwork["DOGECOIN"] = "dogecoin";
    BlockchairNetwork["DASH"] = "dash";
    BlockchairNetwork["GROESTLCOIN"] = "groestlcoin";
    BlockchairNetwork["BITCOIN_TESTNET"] = "bitcoin/testnet";
})(BlockchairNetwork || (BlockchairNetwork = {}));
export class BlockchairClass {
    constructor(network = BlockchairNetwork.BITCOIN) {
        this.endpoint = () => `https://api.blockchair.com/${this.network}`;
        this.fetchUTXO = (txHash, vOut) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.endpoint()}/dashboards/transaction/${txHash}`;
            const response = (yield axios.get(`${url}`, {
                timeout: DEFAULT_TIMEOUT,
            })).data;
            if (!response.data[txHash]) {
                throw new Error(`Transaction not found.`);
            }
            const tx = response.data[txHash];
            let latestBlock = response.context.state;
            if (latestBlock === 0) {
                const statsUrl = `${this.endpoint()}/stats`;
                const statsResponse = (yield axios.get(statsUrl, { timeout: DEFAULT_TIMEOUT })).data;
                latestBlock = statsResponse.data.blocks - 1;
            }
            const confirmations = tx.transaction.block_id === -1
                ? 0
                : Math.max(latestBlock - tx.transaction.block_id + 1, 0);
            return {
                txHash,
                vOut,
                amount: tx.outputs[vOut].value.toString(),
                confirmations,
            };
        });
        this.fetchUTXOs = (address, confirmations = 0) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.endpoint()}/dashboards/address/${address}?limit=0,100`;
            const response = (yield axios.get(url, { timeout: DEFAULT_TIMEOUT })).data;
            let latestBlock = response.context.state;
            if (latestBlock === 0) {
                const statsUrl = `${this.endpoint()}/stats`;
                const statsResponse = (yield axios.get(statsUrl, { timeout: DEFAULT_TIMEOUT })).data;
                latestBlock = statsResponse.data.blocks - 1;
            }
            return response.data[address].utxo
                .map((utxo) => ({
                txHash: utxo.transaction_hash,
                amount: utxo.value.toString(),
                vOut: utxo.index,
                confirmations: utxo.block_id === -1 ? 0 : latestBlock - utxo.block_id + 1,
            }))
                .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations)
                .sort(sortUTXOs);
        });
        this.fetchTXs = (address, confirmations = 0, limit = 25) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.endpoint()}/dashboards/address/${address}?limit=${limit},0`;
            const response = (yield axios.get(url, { timeout: DEFAULT_TIMEOUT })).data;
            let latestBlock = response.context.state;
            if (latestBlock === 0) {
                const statsUrl = `${this.endpoint()}/stats`;
                const statsResponse = (yield axios.get(statsUrl, { timeout: DEFAULT_TIMEOUT })).data;
                latestBlock = statsResponse.data.blocks - 1;
            }
            const txHashes = response.data[address].transactions;
            let txDetails = {};
            // Fetch in sets of 10
            for (let i = 0; i < Math.ceil(txHashes.length / 10); i++) {
                const txUrl = `${this.endpoint()}/dashboards/transactions/${txHashes
                    .slice(i * 10, (i + 1) * 10)
                    .join(",")}`;
                const txResponse = (yield axios.get(txUrl, {
                    timeout: DEFAULT_TIMEOUT,
                })).data;
                txDetails = Object.assign(Object.assign({}, txDetails), txResponse.data);
            }
            const received = [];
            for (const txHash of txHashes) {
                const tx = txDetails[txHash];
                const txConfirmations = tx.transaction.block_id === -1
                    ? 0
                    : Math.max(latestBlock - tx.transaction.block_id + 1, 0);
                for (let i = 0; i < tx.outputs.length; i++) {
                    const output = tx.outputs[i];
                    if (output.recipient === address) {
                        received.push({
                            txHash: tx.transaction.hash,
                            amount: output.value.toString(),
                            vOut: i,
                            confirmations: txConfirmations,
                        });
                    }
                }
            }
            return received
                .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations)
                .sort(sortUTXOs);
        });
        this.broadcastTransaction = (txHex) => __awaiter(this, void 0, void 0, function* () {
            const url = `${this.endpoint()}/push/transaction`;
            const response = yield axios.post(url, { data: txHex }, { timeout: DEFAULT_TIMEOUT });
            if (response.data.error) {
                throw new Error(response.data.error);
            }
            return response.data.data.transaction_hash;
        });
        this.network = network;
    }
}
export const Blockchair = Callable(BlockchairClass);
//# sourceMappingURL=blockchair.js.map
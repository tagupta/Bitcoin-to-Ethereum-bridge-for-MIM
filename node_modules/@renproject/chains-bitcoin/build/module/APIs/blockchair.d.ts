import { UTXO, BitcoinAPI } from "./API";
export declare enum BlockchairNetwork {
    BITCOIN = "bitcoin",
    BITCOIN_CASH = "bitcoin-cash",
    LITECOIN = "litecoin",
    BITCOIN_SV = "bitcoin-sv",
    DOGECOIN = "dogecoin",
    DASH = "dash",
    GROESTLCOIN = "groestlcoin",
    BITCOIN_TESTNET = "bitcoin/testnet"
}
export declare class BlockchairClass implements BitcoinAPI {
    network: BlockchairNetwork;
    constructor(network?: BlockchairNetwork);
    endpoint: () => string;
    fetchUTXO: (txHash: string, vOut: number) => Promise<UTXO>;
    fetchUTXOs: (address: string, confirmations?: number) => Promise<UTXO[]>;
    fetchTXs: (address: string, confirmations?: number, limit?: number) => Promise<UTXO[]>;
    broadcastTransaction: (txHex: string) => Promise<string>;
}
export declare type Blockchair = BlockchairClass;
export declare const Blockchair: import("@renproject/utils").CallableConstructor<typeof BlockchairClass>;

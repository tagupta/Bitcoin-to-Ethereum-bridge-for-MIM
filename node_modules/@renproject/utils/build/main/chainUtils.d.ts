export declare const utilsWithChainNetwork: <Utils extends {
    resolveChainNetwork(network: import("@renproject/interfaces").RenNetworkDetails | import("@renproject/interfaces").RenNetwork | import("@renproject/interfaces").RenNetworkString | Network): Network;
    addressIsValid(address: string | Address, network?: import("@renproject/interfaces").RenNetworkDetails | import("@renproject/interfaces").RenNetwork | import("@renproject/interfaces").RenNetworkString | Network | undefined): boolean;
    transactionIsValid(address: string | Transaction, network?: import("@renproject/interfaces").RenNetworkDetails | import("@renproject/interfaces").RenNetwork | import("@renproject/interfaces").RenNetworkString | Network | undefined): boolean;
    addressExplorerLink?: ((address: string | Address, network?: import("@renproject/interfaces").RenNetworkDetails | import("@renproject/interfaces").RenNetwork | import("@renproject/interfaces").RenNetworkString | Network | undefined, explorer?: string | undefined) => string | undefined) | undefined;
    transactionExplorerLink?: ((transaction: string | Transaction, network?: import("@renproject/interfaces").RenNetworkDetails | import("@renproject/interfaces").RenNetwork | import("@renproject/interfaces").RenNetworkString | Network | undefined, explorer?: string | undefined) => string | undefined) | undefined;
}, Transaction = any, Address extends string | {
    address: string;
} = any, Network = any>(utils: Utils, getClassNetwork: () => Network | undefined) => Utils & {
    addressIsValid: (address: string, network?: "mainnet" | "testnet" | Network | undefined) => boolean;
    addressExplorerLink: ((address: Address, network?: "mainnet" | "testnet" | Network | undefined) => string | undefined) | undefined;
    transactionExplorerLink: ((tx: Transaction, network?: "mainnet" | "testnet" | Network | undefined) => string | undefined) | undefined;
};

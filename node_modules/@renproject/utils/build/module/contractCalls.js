export var OverrideContractCallError;
(function (OverrideContractCallError) {
    OverrideContractCallError["OverrideArrayLengthError"] = "Contract call override must be same length as contract calls array.";
})(OverrideContractCallError || (OverrideContractCallError = {}));
const overrideContractCall = (contractCall, override) => {
    const overrideParams = (override.contractParams || []).reduce((acc, param) => {
        if (param.name) {
            acc[param.name] = param;
        }
        return acc;
    }, {});
    let txConfig;
    if (typeof contractCall.txConfig === "object" &&
        typeof override.txConfig === "object") {
        txConfig = Object.assign(Object.assign({}, contractCall.txConfig), override.txConfig);
    }
    else {
        txConfig = override.txConfig || contractCall.txConfig;
    }
    return Object.assign(Object.assign(Object.assign({}, contractCall), override), { 
        // Clone txConfig
        txConfig, 
        // Clone contractParams
        contractParams: (contractCall.contractParams || []).map((contractParam) => (Object.assign(Object.assign({}, contractParam), overrideParams[contractParam.name]))) });
};
export const overrideContractCalls = (contractCalls, override) => {
    if (Array.isArray(override) && override.length !== contractCalls.length) {
        throw new Error(OverrideContractCallError.OverrideArrayLengthError);
    }
    return contractCalls.map((contractCall, i) => {
        const contractCallOverride = Array.isArray(override)
            ? // If override is an array, there should be an array for each call.
                override[i]
            : // If there's only one override, apply it to the last contract call.
                i === contractCalls.length - 1
                    ? override
                    : // Default to empty object.
                        {};
        return overrideContractCall(contractCall, contractCallOverride);
    });
};
//# sourceMappingURL=contractCalls.js.map
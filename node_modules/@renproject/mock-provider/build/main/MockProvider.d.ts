/// <reference types="node" />
import { Provider } from "@renproject/provider";
import { PackStructType } from "@renproject/rpc/build/main/v2";
import { ParamsQueryConfig, ParamsQueryTx, ParamsSubmitTx, RenVMParams, RenVMResponses, ResponseQueryConfig, ResponseQueryTx, ResponseSubmitTx } from "@renproject/rpc/build/main/v2/methods";
import { BurnTransactionInput, MintTransactionInput } from "@renproject/rpc/build/main/v2/transaction";
import { ChainCommon } from "@renproject/interfaces";
import { ParamsQueryBlockState, ResponseQueryBlockState } from "@renproject/rpc/build/main/v2/methods/ren_queryBlockState";
export declare const responseQueryParamsType: PackStructType;
export declare class MockProvider implements Provider<RenVMParams, RenVMResponses> {
    private privateKeyBuffer;
    private transactions;
    private supportedChains;
    private supportedAssets;
    constructor(privateKey?: Buffer);
    mintAuthority: () => string;
    registerChain: (chain: ChainCommon) => void;
    registerAsset: (asset: string) => void;
    sendMessage<Method extends keyof RenVMParams & string>(method: Method, request: RenVMParams[Method]): RenVMResponses[Method];
    handle_submitTx: (request: ParamsSubmitTx<MintTransactionInput | BurnTransactionInput>) => ResponseSubmitTx;
    handle_queryTx: (request: ParamsQueryTx) => ResponseQueryTx;
    handle_queryConfig: (_request: ParamsQueryConfig) => ResponseQueryConfig;
    handle_queryBlockState: (_request: ParamsQueryBlockState) => ResponseQueryBlockState;
}

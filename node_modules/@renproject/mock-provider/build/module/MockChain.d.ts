/// <reference types="node" />
import { RenNetwork, RenNetworkDetails, RenNetworkString } from "@renproject/interfaces";
import { BtcAddress, BtcNetwork, BtcTransaction, BitcoinClass } from "@renproject/chains-bitcoin";
import { UTXO } from "@renproject/chains-bitcoin/build/main/APIs/API";
import BigNumber from "bignumber.js";
export declare class MockChain extends BitcoinClass {
    static chain: string;
    chain: string;
    name: string;
    mempool: Array<UTXO & {
        to: string;
    }>;
    constructor(asset: string, network?: BtcNetwork);
    fetchUTXO: (txHash: string, vOut: number) => Promise<UTXO>;
    fetchUTXOs: (address: string, confirmations?: number | undefined) => Promise<UTXO[]>;
    addUTXO: (to: string, amount: BigNumber | number) => UTXO;
    withDefaultAPIs: (_network: BtcNetwork) => this;
    static asset: string;
    asset: string;
    static utils: {
        resolveChainNetwork: (network: RenNetworkDetails | RenNetwork | "mainnet" | "testnet" | "devnet" | "localnet" | "regtest") => BtcNetwork;
        p2shPrefix: {
            mainnet: Buffer;
            testnet: Buffer;
        };
        addressBufferToString: (bytes: Buffer) => string;
        addressIsValid: (address: BtcAddress | string, network?: RenNetwork | RenNetworkString | RenNetworkDetails | BtcNetwork) => any;
        transactionIsValid: (transaction: BtcTransaction | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | BtcNetwork) => boolean;
        addressExplorerLink: (address: BtcAddress | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | BtcNetwork) => string | undefined;
        transactionExplorerLink: (tx: BtcTransaction | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | BtcNetwork) => string | undefined;
    };
    utils: {
        resolveChainNetwork: (network: RenNetworkDetails | RenNetwork | "mainnet" | "testnet" | "devnet" | "localnet" | "regtest") => BtcNetwork;
        p2shPrefix: {
            mainnet: Buffer;
            testnet: Buffer;
        };
        addressBufferToString: (bytes: Buffer) => string;
        addressIsValid: (address: BtcAddress | string, network?: RenNetwork | RenNetworkString | RenNetworkDetails | BtcNetwork) => any;
        transactionIsValid: (transaction: BtcTransaction | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | BtcNetwork) => boolean;
        addressExplorerLink: (address: BtcAddress | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | BtcNetwork) => string | undefined;
        transactionExplorerLink: (tx: BtcTransaction | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | BtcNetwork) => string | undefined;
    } & {
        addressIsValid: (address: string, network?: "mainnet" | "testnet" | "regtest" | undefined) => boolean;
        addressExplorerLink: ((address: any, network?: "mainnet" | "testnet" | "regtest" | undefined) => string | undefined) | undefined;
        transactionExplorerLink: ((tx: any, network?: "mainnet" | "testnet" | "regtest" | undefined) => string | undefined) | undefined;
    };
}

/// <reference types="node" />
import { Logger } from "@renproject/interfaces";
import BigNumber from "bignumber.js";
/**
 * Represents 1 second for functions that accept a parameter in milliseconds.
 */
export declare const SECONDS = 1000;
/**
 * Pauses the thread for the specified number of milliseconds.
 *
 * @param ms The number of milliseconds to pause for.
 */
export declare const sleep: (ms: number) => Promise<void>;
/**
 * Remove 0x prefix from a hex string. If the input doesn't have a 0x prefix,
 * it's returned unchanged.
 *
 * @param hex The hex value to be prefixed.
 */
export declare const strip0x: (hex: string) => string;
/**
 * Add a 0x prefix to a hex value, converting to a string first. If the input
 * is already prefixed, it's returned unchanged.
 *
 * @param hex The hex value to be prefixed.
 */
export declare const Ox: (hex: Buffer | string, { prefix }?: {
    prefix: string;
}) => string;
export declare const fromHex: (hex: Buffer | string) => Buffer;
export declare const fromBase64: (base64: Buffer | string) => Buffer;
export declare const toBase64: (input: Buffer) => string;
export declare const fromBigNumber: (bn: BigNumber) => Buffer;
export declare const toURLBase64: (input: Buffer | string) => string;
export declare const toReadable: (value: number | string | BigNumber, decimals: number | string | BigNumber) => BigNumber;
export declare const fromReadable: (value: number | string | BigNumber, decimals: number | string | BigNumber) => BigNumber;
export declare const extractError: (error: unknown) => string;
export declare const retryNTimes: <T>(fnCall: () => Promise<T>, retries: number, timeout?: number, logger?: Logger | undefined) => Promise<T>;
/**
 * Generates a random hex string (prefixed with '0x').
 *
 * @param bytes The number of bytes to generate.
 */
export declare const randomBytes: (bytes: number) => Buffer;
/**
 * Returns a random 32 byte Buffer.
 */
export declare const randomNonce: () => Buffer;
export declare const emptyNonce: () => Buffer;
export declare const rawEncode: (types: string[], parameters: unknown[]) => Buffer;
/**
 * isDefined returns true if the parameter is defined and not null.
 */
export declare const isDefined: <T>(x: T | null | undefined) => x is T;
/**
 * Returns false if the method throws or returns false - returns true otherwise.
 */
export declare const doesntError: <T extends unknown[]>(f: (...p: T) => boolean | void) => (...p: T) => boolean;
/**
 * Returns true if the
 */
export declare const isBase64: (input: string, options?: {
    length?: number | undefined;
} | undefined) => boolean;
export declare const isURLBase64: (input: string, options?: {
    length?: number | undefined;
} | undefined) => boolean;
export declare const isHex: (input: string, options?: {
    prefix?: true | undefined;
    length?: number | undefined;
} | undefined) => boolean;

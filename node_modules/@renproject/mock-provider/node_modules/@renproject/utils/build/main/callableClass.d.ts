declare type Constructor = new (...args: any[]) => any;
declare type ConstructorArgs<TConstructor extends Constructor> = TConstructor extends new (...args: infer TArgs) => any ? TArgs : never;
declare type ConstructorClass<TConstructor extends Constructor> = TConstructor extends new (...args: any[]) => infer TClass ? TClass : never;
export declare type CallableConstructor<TConstructor extends Constructor> = TConstructor & ((...args: ConstructorArgs<TConstructor>) => ConstructorClass<TConstructor>);
export declare function Callable<TConstructor extends Constructor>(type: TConstructor): CallableConstructor<TConstructor>;
export {};

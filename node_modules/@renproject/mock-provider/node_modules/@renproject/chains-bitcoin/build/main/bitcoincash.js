"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitcoinCash = exports.BitcoinCashClass = void 0;
const utils_1 = require("@renproject/utils");
const bchaddrjs_1 = require("bchaddrjs");
const bs58_1 = __importDefault(require("bs58"));
const bitcoinDotCom_1 = require("./APIs/bitcoinDotCom");
const blockchair_1 = require("./APIs/blockchair");
const bitcoin_1 = require("./bitcoin");
const bchaddrjs_2 = require("./bchaddrjs");
class BitcoinCashClass extends bitcoin_1.BitcoinClass {
    constructor() {
        super(...arguments);
        this.chain = BitcoinCashClass.chain;
        this.name = BitcoinCashClass.chain;
        this.legacyName = "Bch";
        // APIs
        this.withDefaultAPIs = (network) => {
            switch (network) {
                case "mainnet":
                    // prettier-ignore
                    return this
                        .withAPI(bitcoinDotCom_1.BitcoinDotCom())
                        .withAPI(blockchair_1.Blockchair(blockchair_1.BlockchairNetwork.BITCOIN_CASH));
                case "testnet":
                    // prettier-ignore
                    return this
                        .withAPI(bitcoinDotCom_1.BitcoinDotCom({ testnet: true }));
                case "regtest":
                    throw new Error(`Regtest is currently not supported.`);
            }
        };
        this.asset = "BCH";
        this.utils = utils_1.utilsWithChainNetwork(BitcoinCashClass.utils, () => this.chainNetwork);
        /**
         * See [[LockChain.addressToBytes]].
         */
        this.addressToBytes = (address) => bchaddrjs_2.decodeBitcoinCashAddress(address);
        /** @deprecated. Renamed to addressToBytes. */
        this.addressStringToBytes = this.addressToBytes;
    }
}
exports.BitcoinCashClass = BitcoinCashClass;
BitcoinCashClass.chain = "BitcoinCash";
BitcoinCashClass.asset = "BCH";
BitcoinCashClass.utils = {
    resolveChainNetwork: bitcoin_1.BitcoinClass.utils.resolveChainNetwork,
    p2shPrefix: {
        mainnet: Buffer.from([0x05]),
        testnet: Buffer.from([0xc4]),
    },
    addressBufferToString: (bytes) => bchaddrjs_1.toCashAddress(bs58_1.default.encode(bytes)),
    addressIsValid: (address, network = "mainnet") => {
        const btcNetwork = exports.BitcoinCash.utils.resolveChainNetwork(network);
        return (bchaddrjs_1.isValidAddress(address) &&
            (btcNetwork === "mainnet"
                ? bchaddrjs_1.isMainnetAddress(address)
                : btcNetwork === "testnet"
                    ? bchaddrjs_1.isTestnetAddress(address)
                    : true));
    },
    transactionIsValid: (transaction, _network = "mainnet") => utils_1.isHex(typeof transaction === "string"
        ? transaction
        : transaction.txHash, { length: 32 }),
    addressExplorerLink: (address, network = "mainnet") => {
        switch (exports.BitcoinCash.utils.resolveChainNetwork(network)) {
            case "mainnet":
                return `https://explorer.bitcoin.com/bch/address/${address}`;
            case "testnet":
                return `https://explorer.bitcoin.com/tbch/address/${address}`;
            case "regtest":
                return undefined;
        }
    },
    transactionExplorerLink: (tx, network = "mainnet") => {
        const txHash = typeof tx === "string" ? tx : tx.txHash;
        switch (exports.BitcoinCash.utils.resolveChainNetwork(network)) {
            case "mainnet":
                return `https://explorer.bitcoin.com/bch/tx/${txHash}`;
            case "testnet":
                return `https://explorer.bitcoin.com/tbch/tx/${txHash}`;
            case "regtest":
                return undefined;
        }
    },
};
exports.BitcoinCash = utils_1.Callable(BitcoinCashClass);
const _ = exports.BitcoinCash;
//# sourceMappingURL=bitcoincash.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DigiByte = exports.DigiByteClass = void 0;
const utils_1 = require("@renproject/utils");
const bs58_1 = __importDefault(require("bs58"));
const insight_1 = require("./APIs/insight");
const bitcoin_1 = require("./bitcoin");
const utils_2 = require("./utils");
class DigiByteClass extends bitcoin_1.BitcoinClass {
    constructor() {
        super(...arguments);
        this.chain = DigiByteClass.chain;
        this.name = DigiByteClass.chain;
        // APIs
        this.withDefaultAPIs = (network) => {
            switch (network) {
                case "mainnet":
                    // prettier-ignore
                    return this
                        .withAPI(insight_1.Insight("https://multichain-web-proxy.herokuapp.com/digibyte-mainnet"))
                        .withAPI(insight_1.Insight("https://digiexplorer.info/api"))
                        .withAPI(insight_1.Insight("https://insight.digibyte.host/api"));
                case "testnet":
                    // prettier-ignore
                    return this
                        .withAPI(insight_1.Insight("https://testnetexplorer.digibyteservers.io/api"));
                case "regtest":
                    throw new Error(`Regtest is currently not supported.`);
            }
        };
        this.asset = DigiByteClass.asset;
        this.utils = utils_1.utilsWithChainNetwork(DigiByteClass.utils, () => this.chainNetwork);
    }
}
exports.DigiByteClass = DigiByteClass;
DigiByteClass.chain = "DigiByte";
DigiByteClass.asset = "DGB";
DigiByteClass.utils = {
    resolveChainNetwork: bitcoin_1.BitcoinClass.utils.resolveChainNetwork,
    p2shPrefix: {
        // Source: https://github.com/digicontributer/digibyte-js/blob/27156cd1cb4430c4a4959f46e809629846694434/lib/networks.js
        mainnet: Buffer.from([0x3f]),
        testnet: Buffer.from([0x8c]),
    },
    addressBufferToString: bs58_1.default.encode,
    addressIsValid: (address, network = "mainnet") => utils_2.validateAddress(address, DigiByteClass.asset, exports.DigiByte.utils.resolveChainNetwork(network)),
    transactionIsValid: (transaction, _network = "mainnet") => utils_1.isHex(typeof transaction === "string"
        ? transaction
        : transaction.txHash, { length: 32 }),
    addressExplorerLink: (address, network = "mainnet") => {
        switch (exports.DigiByte.utils.resolveChainNetwork(network)) {
            case "mainnet":
                return `https://digiexplorer.info/address/${address}`;
            case "testnet":
                return `https://testnetexplorer.digibyteservers.io/address/${address}`;
            case "regtest":
                return undefined;
        }
    },
    transactionExplorerLink: (tx, network = "mainnet") => {
        const txHash = typeof tx === "string" ? tx : tx.txHash;
        switch (exports.DigiByte.utils.resolveChainNetwork(network)) {
            case "mainnet":
                return `https://digiexplorer.info/tx/${txHash}`;
            case "testnet":
                return `https://testnetexplorer.digibyteservers.io/tx/${txHash}`;
            case "regtest":
                return undefined;
        }
    },
};
exports.DigiByte = utils_1.Callable(DigiByteClass);
const _ = exports.DigiByte;
//# sourceMappingURL=digibyte.js.map
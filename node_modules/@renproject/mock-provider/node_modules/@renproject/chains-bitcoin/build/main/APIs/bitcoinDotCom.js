"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitcoinDotCom = exports.BitcoinDotComClass = void 0;
const utils_1 = require("@renproject/utils");
const axios_1 = __importDefault(require("axios"));
const API_1 = require("./API");
class BitcoinDotComClass {
    constructor({ testnet = false } = {}) {
        this.endpoint = () => this.testnet
            ? "https://trest.bitcoin.com/v2/"
            : "https://rest.bitcoin.com/v2/";
        this.endpointV2 = () => this.testnet
            ? "https://explorer-tbch.api.bitcoin.com/tbch/v1"
            : "https://explorer.api.bitcoin.com/bch/v1";
        this.fetchUTXO = async (txHash, vOut) => {
            const url = `${this.endpointV2()}/tx/${txHash}`;
            const response = await axios_1.default.get(`${url}`, {
                timeout: API_1.DEFAULT_TIMEOUT,
            });
            const utxo = response.data;
            return API_1.fixUTXO({
                txHash,
                amount: utxo.vout[vOut].value.toString(),
                vOut,
                confirmations: utxo.confirmations,
            }, 8);
        };
        this.fetchUTXOs = async (address, confirmations = 0) => {
            const url = `${this.endpointV2()}/addr/${address}/utxo`;
            const response = await axios_1.default.get(url, {
                timeout: API_1.DEFAULT_TIMEOUT,
            });
            return API_1.fixUTXOs(response.data
                .map((utxo) => ({
                txHash: utxo.txid,
                amount: utxo.amount.toString(),
                vOut: utxo.vout,
                confirmations: utxo.confirmations,
            }))
                .filter((utxo) => confirmations === 0 ||
                utxo.confirmations >= confirmations), 8).sort(API_1.sortUTXOs);
        };
        this.fetchTXs = async (address, confirmations = 0) => {
            const url = `${this.endpoint().replace(/\/$/, "")}/address/transactions/${address}`;
            const { data } = await axios_1.default.get(url, {
                timeout: API_1.DEFAULT_TIMEOUT,
            });
            const received = [];
            for (const tx of data.txs) {
                for (let i = 0; i < tx.vout.length; i++) {
                    const vout = tx.vout[i];
                    if (vout.scriptPubKey.addresses.indexOf(address) >= 0) {
                        received.push({
                            txHash: tx.txid,
                            amount: API_1.fixValue(parseFloat(vout.value), 8).toFixed(),
                            vOut: i,
                            confirmations: tx.confirmations,
                        });
                    }
                }
            }
            return received
                .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations)
                .sort(API_1.sortUTXOs);
        };
        this.broadcastTransaction = async (txHex) => {
            const url = `${this.endpoint().replace(/\/$/, "")}/rawtransactions/sendRawTransaction`;
            const response = await axios_1.default.post(url, { hexes: [txHex] }, { timeout: API_1.DEFAULT_TIMEOUT });
            if (response.data.error) {
                throw new Error(response.data.error);
            }
            return response.data[0];
        };
        this.testnet = testnet;
    }
}
exports.BitcoinDotComClass = BitcoinDotComClass;
exports.BitcoinDotCom = utils_1.Callable(BitcoinDotComClass);
//# sourceMappingURL=bitcoinDotCom.js.map
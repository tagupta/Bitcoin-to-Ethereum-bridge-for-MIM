import { hash160, sha256 } from "@renproject/utils";
import { Opcode } from "./opcodes";
const checksum = (hash) => sha256(sha256(hash)).slice(0, 4);
export class Script {
    constructor() {
        this.OP = Opcode;
        this.addOp = (op) => {
            this.script = Buffer.concat([this.script, Buffer.from([op])]);
            return this;
        };
        this.addData = (data) => {
            this.script = Buffer.concat([
                this.script,
                Buffer.from([data.length]),
                data,
            ]);
            return this;
        };
        this.toBuffer = () => this.script;
        this.toScriptHashOut = () => {
            return new Script()
                .addOp(Script.OP.OP_HASH160)
                .addData(hash160(this.toBuffer()))
                .addOp(Script.OP.OP_EQUAL)
                .toBuffer();
        };
        this.toAddress = (prefix) => {
            // Hash
            const hash = hash160(this.toBuffer());
            // Prepend prefix
            const hashWithPrefix = Buffer.concat([prefix, hash]);
            // Append checksum
            const hashWithChecksum = Buffer.concat([
                hashWithPrefix,
                checksum(hashWithPrefix),
            ]);
            return hashWithChecksum;
        };
        this.script = Buffer.from([]);
    }
}
Script.OP = Opcode;
//# sourceMappingURL=script.js.map
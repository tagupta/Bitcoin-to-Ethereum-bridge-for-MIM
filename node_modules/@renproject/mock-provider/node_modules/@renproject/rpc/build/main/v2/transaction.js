"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashTransaction = exports.submitGatewayType = exports.mintParamsType = exports.burnParamsType = void 0;
const utils_1 = require("@renproject/utils");
const marshal_1 = require("./pack/marshal");
const pack_1 = require("./pack/pack");
exports.burnParamsType = {
    struct: [
        {
            amount: pack_1.PackPrimitive.U256,
        },
        {
            to: pack_1.PackPrimitive.Str,
        },
        {
            nonce: pack_1.PackPrimitive.Bytes32,
        },
    ],
};
const mintParamsType = () => ({
    struct: [
        {
            txid: pack_1.PackPrimitive.Bytes,
        },
        {
            txindex: pack_1.PackPrimitive.U32,
        },
        {
            amount: pack_1.PackPrimitive.U256,
        },
        {
            payload: pack_1.PackPrimitive.Bytes,
        },
        {
            phash: pack_1.PackPrimitive.Bytes32,
        },
        {
            to: pack_1.PackPrimitive.Str,
        },
        {
            nonce: pack_1.PackPrimitive.Bytes32,
        },
        {
            nhash: pack_1.PackPrimitive.Bytes32,
        },
        {
            gpubkey: pack_1.PackPrimitive.Bytes,
        },
        {
            ghash: pack_1.PackPrimitive.Bytes32,
        },
    ],
});
exports.mintParamsType = mintParamsType;
const submitGatewayType = () => ({
    struct: [
        {
            payload: pack_1.PackPrimitive.Bytes,
        },
        {
            phash: pack_1.PackPrimitive.Bytes32,
        },
        {
            to: pack_1.PackPrimitive.Str,
        },
        {
            nonce: pack_1.PackPrimitive.Bytes32,
        },
        {
            nhash: pack_1.PackPrimitive.Bytes32,
        },
        {
            gpubkey: pack_1.PackPrimitive.Bytes,
        },
        {
            ghash: pack_1.PackPrimitive.Bytes32,
        },
    ],
});
exports.submitGatewayType = submitGatewayType;
const hashTransaction = (version, selector, packValue) => {
    utils_1.assertType("string", { version, selector });
    return utils_1.sha256(Buffer.concat([
        marshal_1.marshalString(version),
        marshal_1.marshalString(selector),
        marshal_1.marshalTypedPackValue(packValue),
    ]));
};
exports.hashTransaction = hashTransaction;
//# sourceMappingURL=transaction.js.map
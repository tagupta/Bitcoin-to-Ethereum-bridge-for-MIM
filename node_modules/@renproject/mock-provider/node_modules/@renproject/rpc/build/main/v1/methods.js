"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPCMethod = void 0;
var RPCMethod;
(function (RPCMethod) {
    // MethodSubmitTx submits a new transaction to the Darknode for acceptance
    // into the transaction pool.
    RPCMethod["MethodSubmitTx"] = "ren_submitTx";
    // MethodQueryTx returns the latest information about a transaction
    // identified by a transaction hash.
    RPCMethod["MethodQueryTx"] = "ren_queryTx";
    // MethodQueryTxs returns pages of transactions with optional filtering by
    // status and tags.
    RPCMethod["MethodQueryTxs"] = "ren_queryTxs";
    // MethodQueryBlock returns a block identified by the block height.
    RPCMethod["MethodQueryBlock"] = "ren_queryBlock";
    // MethodQueryBlocks returns recently committed blocks.
    RPCMethod["MethodQueryBlocks"] = "ren_queryBlocks";
    // MethodQueryNumPeers returns the number of known peers.
    RPCMethod["MethodQueryNumPeers"] = "ren_queryNumPeers";
    // MethodQueryPeers returns a random subset of known peers.
    RPCMethod["MethodQueryPeers"] = "ren_queryPeers";
    // MethodQueryShards returns information about the currently online/offline
    // Shards.
    RPCMethod["MethodQueryShards"] = "ren_queryShards";
    // MethodQueryStat returns status information about the Darknode. This
    // information cannot be verified.
    RPCMethod["MethodQueryStat"] = "ren_queryStat";
    // MethodQueryFees returns information about the current RenVM fees and
    // underlying blockchain fees. This information cannot be verified.
    RPCMethod["MethodQueryFees"] = "ren_queryFees";
})(RPCMethod = exports.RPCMethod || (exports.RPCMethod = {}));
// The following lines will throw a type error if RenVMResponses or RenVMParams
// aren't defined for all RPC methods.
// type _responsesCheck = RenVMResponses[RPCMethod];
// type _paramsCheck = RenVMParams[RPCMethod];
() => { };
() => { };
//# sourceMappingURL=methods.js.map
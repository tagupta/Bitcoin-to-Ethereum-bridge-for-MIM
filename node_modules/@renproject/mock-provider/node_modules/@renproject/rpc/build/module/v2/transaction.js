import { assertType, sha256 } from "@renproject/utils";
import { marshalString, marshalTypedPackValue } from "./pack/marshal";
import { PackPrimitive } from "./pack/pack";
export const burnParamsType = {
    struct: [
        {
            amount: PackPrimitive.U256,
        },
        {
            to: PackPrimitive.Str,
        },
        {
            nonce: PackPrimitive.Bytes32,
        },
    ],
};
export const mintParamsType = () => ({
    struct: [
        {
            txid: PackPrimitive.Bytes,
        },
        {
            txindex: PackPrimitive.U32,
        },
        {
            amount: PackPrimitive.U256,
        },
        {
            payload: PackPrimitive.Bytes,
        },
        {
            phash: PackPrimitive.Bytes32,
        },
        {
            to: PackPrimitive.Str,
        },
        {
            nonce: PackPrimitive.Bytes32,
        },
        {
            nhash: PackPrimitive.Bytes32,
        },
        {
            gpubkey: PackPrimitive.Bytes,
        },
        {
            ghash: PackPrimitive.Bytes32,
        },
    ],
});
export const submitGatewayType = () => ({
    struct: [
        {
            payload: PackPrimitive.Bytes,
        },
        {
            phash: PackPrimitive.Bytes32,
        },
        {
            to: PackPrimitive.Str,
        },
        {
            nonce: PackPrimitive.Bytes32,
        },
        {
            nhash: PackPrimitive.Bytes32,
        },
        {
            gpubkey: PackPrimitive.Bytes,
        },
        {
            ghash: PackPrimitive.Bytes32,
        },
    ],
});
export const hashTransaction = (version, selector, packValue) => {
    assertType("string", { version, selector });
    return sha256(Buffer.concat([
        marshalString(version),
        marshalString(selector),
        marshalTypedPackValue(packValue),
    ]));
};
//# sourceMappingURL=transaction.js.map
/// <reference types="node" />
import BigNumber from "bignumber.js";
import { AbiItem } from "./abi";
import { Base64String, TxStatus } from "./types";
export interface RenTransaction<Input, Output> {
    version?: number;
    hash: Base64String;
    txStatus: TxStatus;
    to: string;
    in: Input;
    out?: Output;
}
export declare type LockAndMintTransaction = RenTransaction<{
    p: {
        abi: AbiItem[];
        value: Buffer;
        fn: string;
    };
    token: string;
    to: string;
    n: Buffer;
    utxo: {
        txHash: string;
        vOut: number;
        scriptPubKey: string;
        amount: string;
    };
}, {
    phash: Buffer;
    amount: string;
    ghash: Buffer;
    nhash: Buffer;
    sighash: Buffer;
    signature?: Buffer;
    revert?: undefined;
} | {
    revert: Buffer;
}>;
export declare type BurnAndReleaseTransaction = RenTransaction<{
    ref: string;
    to: string;
    amount: string;
}, {
    amount?: BigNumber;
    txid?: Buffer;
    outpoint?: {
        hash: Buffer;
        index: BigNumber;
    };
    revert?: undefined;
} | {
    revert: Buffer;
}>;
export declare type RenVMAssetFees = {
    [mintChain: string]: {
        mint: number;
        burn: number;
    };
} & {
    lock: BigNumber;
    release: BigNumber;
};
export interface RenVMFees {
    [asset: string]: RenVMAssetFees;
}

/// <reference types="node" />
/**
 * @file PromiEvent.js
 * @author Fabian Vogelsteller <fabian@ethereum.org>, Samuel Furter <samuel@ethereum.org>
 * @date 2018
 */
import { EventEmitter } from "events";
export declare class EventEmitterTyped<EventTypes extends {
    [event: string]: any[];
} = {}> {
    readonly emit: <Event extends keyof EventTypes>(event: Event, ...args: EventTypes[Event]) => boolean;
    readonly removeListener: EventEmitter["removeListener"];
    readonly on: <Event extends keyof EventTypes>(event: Event, callback: (...values: EventTypes[Event]) => void | Promise<void>) => this;
    readonly once: <Event extends keyof EventTypes>(event: Event, callback: (...values: EventTypes[Event]) => void | Promise<void>) => this;
    readonly listenerCount: (event: string | symbol) => number;
}
export declare class InternalPromiEvent<T, EventTypes extends {
    [event: string]: any[];
} = {}> extends EventEmitterTyped<EventTypes> {
    readonly [Symbol.toStringTag]: "Promise";
    readonly promise: Promise<T>;
    resolve: (value: T | PromiseLike<T>) => void;
    reject: (reason?: any) => void;
    eventEmitter: EventEmitter;
    private _cancelled;
    readonly emit: <Event extends keyof EventTypes>(event: Event, ...args: EventTypes[Event]) => boolean;
    readonly removeListener: EventEmitter["removeListener"];
    readonly on: <Event extends keyof EventTypes>(event: Event, callback: (...values: EventTypes[Event]) => void | Promise<void>) => this;
    readonly once: <Event extends keyof EventTypes>(event: Event, callback: (...values: EventTypes[Event]) => void | Promise<void>) => this;
    readonly listenerCount: (event: string | symbol) => number;
    readonly _cancel: () => void;
    readonly _resume: () => void;
    readonly _isCancelled: () => boolean;
    readonly then: Promise<T>["then"];
    readonly catch: Promise<T>["catch"];
    readonly finally: Promise<T>["finally"];
    /**
     * @constructor
     */
    constructor();
    /**
     * Proxy handler to call the promise or eventEmitter methods
     */
    proxyHandler(target: PromiEvent<T, EventTypes>, name: string): unknown;
}
export declare type PromiEvent<T, EventTypes extends {
    [event: string]: any[];
} = {}> = InternalPromiEvent<T, EventTypes> & Promise<T>;
export declare const newPromiEvent: <T, EventTypes extends {
    [event: string]: any[];
} = {}>() => PromiEvent<T, EventTypes>;

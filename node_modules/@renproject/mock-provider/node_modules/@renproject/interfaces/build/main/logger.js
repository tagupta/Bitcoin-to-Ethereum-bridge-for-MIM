"use strict";
/* eslint-disable no-console */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NullLogger = exports.SimpleLogger = exports.LogLevel = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Error"] = 0] = "Error";
    LogLevel[LogLevel["Warn"] = 1] = "Warn";
    LogLevel[LogLevel["Log"] = 2] = "Log";
    LogLevel[LogLevel["Info"] = 3] = "Info";
    LogLevel[LogLevel["Debug"] = 4] = "Debug";
    LogLevel[LogLevel["Trace"] = 5] = "Trace";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
const stringToLogLevel = (level) => {
    switch (level) {
        case "error":
        case LogLevel.Error:
            return 0;
        case "warn":
        case LogLevel.Warn:
            return 1;
        case "warn":
        case LogLevel.Log:
            return 2;
        case "info":
        case LogLevel.Info:
            return 3;
        case "debug":
        case LogLevel.Debug:
            return 4;
        case "trace":
        case LogLevel.Trace:
            return 5;
        default:
            return 1;
    }
};
const logLevelName = (level) => {
    switch (stringToLogLevel(level)) {
        case LogLevel.Error:
            return "ERROR";
        case LogLevel.Warn:
            return "WARN";
        case LogLevel.Log:
            return "WARN";
        case LogLevel.Info:
            return "INFO";
        case LogLevel.Debug:
            return "DEBUG";
        case LogLevel.Trace:
            return "TRACE";
    }
};
const toString = (value) => {
    try {
        if (bignumber_js_1.default.isBigNumber(value)) {
            return value.toFixed();
        }
        return value;
    }
    catch (error) {
        try {
            return String(value);
        }
        catch (errorInner) {
            return "";
        }
    }
};
const printWithPrefix = (l, prefix, ...args) => {
    if (prefix) {
        l(prefix, ...args);
    }
    else {
        l(...args);
    }
};
/**
 * SimpleLogger is a implementation of the Logger interface that also supports
 * setting the log level.
 *
 * @export
 * @class SimpleLogger
 */
class SimpleLogger {
    constructor(level = LogLevel.Warn, logPrefix, debugPrefix) {
        this.logPrefix = () => "";
        this.debugPrefix = (level) => `[RenJS][${logLevelName(level)}]`;
        this.trace = (message, ...optionalParams) => {
            if (this.level >= LogLevel.Trace) {
                if (optionalParams.length && typeof message === "string") {
                    console.group((this.debugPrefix(LogLevel.Trace) || "") + message);
                    console.trace(...optionalParams.map(toString));
                    console.groupEnd();
                }
                else {
                    printWithPrefix(console.trace, this.debugPrefix(LogLevel.Trace), toString(message), ...optionalParams.map(toString));
                }
            }
        };
        this.debug = (message, ...optionalParams) => {
            if (this.level >= LogLevel.Debug) {
                if (optionalParams.length && typeof message === "string") {
                    console.group((this.debugPrefix(LogLevel.Debug) || "") + message);
                    console.debug(...optionalParams.map(toString));
                    console.groupEnd();
                }
                else {
                    printWithPrefix(console.debug, this.debugPrefix(LogLevel.Debug), toString(message), ...optionalParams.map(toString));
                }
            }
        };
        this.info = (...optionalParams) => {
            if (this.level >= LogLevel.Info) {
                printWithPrefix(console.info, this.logPrefix(LogLevel.Info), ...optionalParams.map(toString));
            }
        };
        this.log = (...optionalParams) => {
            if (this.level >= LogLevel.Log) {
                printWithPrefix(console.log, this.logPrefix(LogLevel.Log), ...optionalParams.map(toString));
            }
        };
        this.warn = (...optionalParams) => {
            if (this.level >= LogLevel.Warn) {
                printWithPrefix(console.warn, this.logPrefix(LogLevel.Warn), ...optionalParams.map(toString));
            }
        };
        this.error = (...optionalParams) => {
            if (this.level >= LogLevel.Error) {
                printWithPrefix(console.error, this.logPrefix(LogLevel.Error), ...optionalParams.map(toString));
            }
        };
        this.level = level;
        if (logPrefix) {
            const logPrefixFn = typeof logPrefix === "string" ? () => logPrefix : logPrefix;
            this.logPrefix = logPrefixFn;
            this.debugPrefix = logPrefixFn;
        }
        if (debugPrefix) {
            const debugPrefixFn = typeof debugPrefix === "string"
                ? () => debugPrefix
                : debugPrefix;
            this.debugPrefix = debugPrefixFn;
        }
    }
}
exports.SimpleLogger = SimpleLogger;
exports.NullLogger = {
    level: -1,
    trace: (_message, ..._optionalParams) => { },
    debug: (_message, ..._optionalParams) => { },
    info: (_message, ..._optionalParams) => { },
    log: (_message, ..._optionalParams) => { },
    warn: (_message, ..._optionalParams) => { },
    error: (_message, ..._optionalParams) => { },
};
//# sourceMappingURL=logger.js.map
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { LCDClient } from "@terra-money/terra.js";
import { TerraNetwork } from "./deposit";
// Cache clients
const clients = {};
export const getHeight = (network) => __awaiter(void 0, void 0, void 0, function* () {
    // connect to testnet
    let prefix;
    switch (network) {
        case TerraNetwork.Columbus:
            prefix = "lcd";
            break;
        case TerraNetwork.Tequila:
            prefix = "tequila-lcd";
            break;
        default:
            throw new Error(`Terra network ${String(network)} not supported.`);
    }
    const terra = clients[network] ||
        new LCDClient({
            URL: `https://${String(prefix)}.terra.dev`,
            chainID: network,
        });
    clients[network] = terra;
    const result = yield terra.tendermint.blockInfo();
    return parseInt(result.block.header.height, 10);
});
//# sourceMappingURL=height.js.map
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { SECONDS } from "@renproject/utils";
import Axios from "axios";
import { TerraNetwork } from "./deposit";
import { getHeight } from "./height";
const STAKE_ID_URL = (network) => {
    let prefix;
    switch (network) {
        case TerraNetwork.Columbus:
            prefix = "columbus";
            break;
        // case TerraNetwork.Soju:
        //     prefix = "soju";
        //     break;
        default:
            throw new Error(`Terra network ${String(network)} not supported.`);
    }
    return `https://${String(prefix)}.stake.id/api`;
};
const extractDepositsFromTx = (chainHeight) => (tx) => {
    const msgs = [];
    try {
        const decodedMsgs = JSON.parse(Buffer.from(tx.msg, "base64").toString());
        for (let i = 0; i < decodedMsgs.length; i++) {
            const msg = decodedMsgs[i];
            if (msg.type === "bank/MsgSend") {
                for (const amount of msg.value.amount) {
                    msgs.push(Object.assign(Object.assign(Object.assign({}, tx), { messageIndex: i, to_address: msg.value.to_address, from_address: msg.value.from_address }), amount));
                }
            }
        }
    }
    catch (_error) {
        return [];
    }
    return msgs.map((msg) => {
        return {
            hash: msg.hash,
            messageIndex: msg.messageIndex,
            from: msg.from_address,
            to: msg.to_address,
            denomination: msg.denom,
            amount: msg.amount,
            memo: msg.memo,
            confirmations: msg.height
                ? chainHeight - msg.height
                : msg.height, // TODO
        };
    });
};
const concat = (x, y) => x.concat(y);
const fetchDeposits = (address, network, memo = undefined, page = 0) => __awaiter(void 0, void 0, void 0, function* () {
    // const paramsFilterBase64 = paramsFilter && paramsFilter.toString("base64");
    const url = `${STAKE_ID_URL(network)}/addr/${address}?page=${page + 1}`;
    const response = (yield Axios.get(url, {
        timeout: 60 * SECONDS,
    })).data;
    const { status, errors, txs } = response;
    if (status !== "OK") {
        throw new Error(`Unable to fetch Terra deposits: ${String(status)}: ${String(errors)}`);
    }
    const filteredTxs = !memo
        ? txs
        : txs.filter((message) => message.memo === memo);
    // Create an entry for each message. Transactions can contain multiple
    // messages.
    // Fetch current height of the chain. Skip if no messages were found.
    const chainHeight = filteredTxs.length > 0 ? yield getHeight(network) : 0;
    return filteredTxs
        .map(extractDepositsFromTx(chainHeight))
        .reduce(concat, [])
        .filter((msg) => msg.to === address);
});
const fetchDeposit = (hash, messageIndex, network) => __awaiter(void 0, void 0, void 0, function* () {
    // const paramsFilterBase64 = paramsFilter && paramsFilter.toString("base64");
    const url = `${STAKE_ID_URL(network)}/tx/${hash}`;
    const response = (yield Axios.get(url, {
        timeout: 60 * SECONDS,
    })).data;
    const { status, errors, tx } = response;
    if (status !== "OK") {
        throw new Error(`Unable to fetch Terra deposit: ${String(status)}: ${String(errors)}`);
    }
    // Create an entry for each message. Transactions can contain multiple
    // messages.
    // Fetch current height of the chain. Skip if no messages were found.
    const chainHeight = yield getHeight(network);
    return extractDepositsFromTx(chainHeight)(tx)[messageIndex];
});
export const stakeId = {
    fetchDeposits,
    fetchDeposit,
};
//# sourceMappingURL=stakeId.js.map
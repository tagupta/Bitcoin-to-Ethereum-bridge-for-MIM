/// <reference types="node" />
import { LockChain, RenNetwork, RenNetworkDetails, RenNetworkString, BurnPayloadConfig } from "@renproject/interfaces";
import { TerraAddress, TerraDeposit, TerraNetwork, TerraTransaction } from "./api/deposit";
export declare enum TerraAssets {
    LUNA = "LUNA"
}
/**
 * TerraClass implements the LockChain interface for Terra (https://terra.money)
 * and it's asset LUNA.
 */
export declare class TerraClass implements LockChain<TerraTransaction, TerraDeposit, TerraAddress, TerraNetwork> {
    static chain: string;
    chain: string;
    name: string;
    renNetwork: RenNetworkDetails | undefined;
    chainNetwork: TerraNetwork | undefined;
    assets: TerraAssets[];
    static utils: {
        resolveChainNetwork: (network: RenNetworkDetails | RenNetwork | RenNetworkString | TerraNetwork) => TerraNetwork;
        addressIsValid: (addressIn: TerraAddress | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | TerraNetwork) => boolean;
        transactionIsValid: (transaction: TerraTransaction | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | TerraNetwork) => boolean;
        addressExplorerLink: (addressIn: TerraAddress | string, network?: RenNetwork | RenNetworkString | RenNetworkDetails | TerraNetwork) => string;
        transactionExplorerLink: (transaction: TerraTransaction | string, network?: RenNetwork | RenNetworkString | RenNetworkDetails | TerraNetwork) => string;
    };
    utils: {
        resolveChainNetwork: (network: RenNetworkDetails | RenNetwork | RenNetworkString | TerraNetwork) => TerraNetwork;
        addressIsValid: (addressIn: TerraAddress | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | TerraNetwork) => boolean;
        transactionIsValid: (transaction: TerraTransaction | string, _network?: RenNetwork | RenNetworkString | RenNetworkDetails | TerraNetwork) => boolean;
        addressExplorerLink: (addressIn: TerraAddress | string, network?: RenNetwork | RenNetworkString | RenNetworkDetails | TerraNetwork) => string;
        transactionExplorerLink: (transaction: TerraTransaction | string, network?: RenNetwork | RenNetworkString | RenNetworkDetails | TerraNetwork) => string;
    } & {
        addressIsValid: (address: string, network?: "mainnet" | "testnet" | TerraNetwork | undefined) => boolean;
        addressExplorerLink: ((address: TerraAddress, network?: "mainnet" | "testnet" | TerraNetwork | undefined) => string | undefined) | undefined;
        transactionExplorerLink: ((tx: TerraTransaction, network?: "mainnet" | "testnet" | TerraNetwork | undefined) => string | undefined) | undefined;
    };
    constructor(network?: TerraNetwork);
    /**
     * See [[LockChain.initialize]].
     */
    initialize: (renNetwork: RenNetwork | RenNetworkString | RenNetworkDetails) => this;
    /**
     * See [[LockChain.assetIsNative]].
     */
    assetIsNative: (asset: string) => boolean;
    assetIsSupported: (asset: string) => boolean;
    readonly assertAssetIsSupported: (asset: string) => void;
    /**
     * See [[LockChain.assetDecimals]].
     */
    assetDecimals: (asset: string) => number;
    /**
     * See [[LockChain.getDeposits]].
     */
    getDeposits: (asset: string, address: TerraAddress, _instanceID: void, onDeposit: (deposit: TerraDeposit) => Promise<void>) => Promise<void>;
    /**
     * See [[LockChain.transactionConfidence]].
     */
    transactionConfidence: (transaction: TerraTransaction) => Promise<{
        current: number;
        target: number;
    }>;
    /**
     * See [[LockChain.getGatewayAddress]].
     */
    getGatewayAddress: (asset: string, compressedPublicKey: Buffer, gHash: Buffer) => Promise<TerraAddress> | TerraAddress;
    /**
     * See [[LockChain.addressToBytes]].
     */
    addressToBytes: (address: TerraAddress | string) => Buffer;
    /**
     * See [[LockChain.bytesToAddress]].
     */
    bytesToAddress: (address: Buffer) => string;
    /** @deprecated. Renamed to addressToBytes. */
    addressStringToBytes: (address: TerraAddress | string) => Buffer;
    addressToString: (address: TerraAddress | string) => string;
    /**
     * See [[LockChain.transactionID]].
     */
    transactionID: (transaction: TerraTransaction) => string;
    transactionIDFromRPCFormat: (txid: string | Buffer, _txindex: string) => string;
    transactionFromRPCFormat: (txid: string | Buffer, txindex: string) => Promise<TerraTransaction>;
    /**
     * @deprecated Renamed to `transactionFromRPCFormat`.
     * Will be removed in 3.0.0.
     */
    transactionFromID: (txid: string | Buffer, txindex: string) => Promise<TerraTransaction>;
    depositV1HashString: (_deposit: TerraDeposit) => string;
    transactionRPCFormat: (transaction: TerraTransaction, v2?: boolean | undefined) => {
        txid: Buffer;
        txindex: string;
    };
    transactionRPCTxidFromID: (transactionID: string) => Buffer;
    getBurnPayload: ((bytes?: boolean) => string) | undefined;
    Address: (address: string) => this;
    burnPayload?: ((config?: BurnPayloadConfig | undefined) => string | undefined) | undefined;
}
export declare type Terra = TerraClass;
export declare const Terra: import("@renproject/utils").CallableConstructor<typeof TerraClass>;

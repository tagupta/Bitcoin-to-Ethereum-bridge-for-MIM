"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.terraDev = void 0;
const utils_1 = require("@renproject/utils");
const axios_1 = __importDefault(require("axios"));
const deposit_1 = require("./deposit");
const height_1 = require("./height");
const TERRA_DEV_URL = (network) => {
    let prefix;
    switch (network) {
        case deposit_1.TerraNetwork.Columbus:
            prefix = "fcd";
            break;
        case deposit_1.TerraNetwork.Tequila:
            prefix = "tequila-fcd";
            break;
        default:
            throw new Error(`Terra network ${String(network)} not supported.`);
    }
    return `https://${String(prefix)}.terra.dev/v1`;
};
const extractDepositsFromTx = (chainHeight) => (tx) => {
    const msgs = [];
    try {
        const decodedMsgs = tx.tx.value.msg;
        for (let i = 0; i < decodedMsgs.length; i++) {
            const msg = decodedMsgs[i];
            if (msg.type === "bank/MsgSend") {
                for (const amount of msg.value.amount) {
                    msgs.push(Object.assign(Object.assign(Object.assign({}, tx), { messageIndex: i, to_address: msg.value.to_address, from_address: msg.value.from_address }), amount));
                }
            }
        }
    }
    catch (_error) {
        return [];
    }
    return msgs.map((msg) => {
        return {
            hash: msg.txhash,
            messageIndex: msg.messageIndex,
            from: msg.from_address,
            to: msg.to_address,
            denomination: msg.denom,
            amount: msg.amount,
            memo: msg.tx.value.memo,
            confirmations: msg.height
                ? chainHeight - parseInt(msg.height, 10)
                : msg.height, // TODO
        };
    });
};
const concat = (x, y) => x.concat(y);
const fetchDeposits = async (address, network, memo = undefined) => {
    // const paramsFilterBase64 = paramsFilter && paramsFilter.toString("base64");
    // const url = `${TERRA_DEV_URL(network)}/txs?account=${address}&page=${
    //     page + 1
    // }&chainId=${network}`;
    const url = `${TERRA_DEV_URL(network)}/txs?account=${address}&chainId=${network}`;
    const response = (await axios_1.default.get(url, {
        timeout: 60 * utils_1.SECONDS,
    })).data;
    const { txs } = response;
    const filteredTxs = !memo
        ? txs
        : txs.filter((message) => message.tx &&
            message.tx.value &&
            message.tx.value.memo === memo);
    // Create an entry for each message. Transactions can contain multiple
    // messages.
    // Fetch current height of the chain. Skip if no messages were found.
    const chainHeight = filteredTxs.length > 0 ? await height_1.getHeight(network) : 0;
    return filteredTxs
        .map(extractDepositsFromTx(chainHeight))
        .reduce(concat, [])
        .filter((msg) => msg.to === address);
};
const fetchDeposit = async (hash, messageIndex, network) => {
    // const paramsFilterBase64 = paramsFilter && paramsFilter.toString("base64");
    const url = `${TERRA_DEV_URL(network)}/tx/${hash}`;
    const tx = (await axios_1.default.get(url, {
        timeout: 60 * utils_1.SECONDS,
    })).data;
    if (tx === null) {
        throw new Error(`Unable to find Terra transaction ${hash}.`);
    }
    // Create an entry for each message. Transactions can contain multiple
    // messages.
    // Fetch current height of the chain. Skip if no messages were found.
    const chainHeight = await height_1.getHeight(network);
    return extractDepositsFromTx(chainHeight)(tx)[messageIndex];
};
exports.terraDev = {
    fetchDeposits,
    fetchDeposit,
};
//# sourceMappingURL=terraDev.js.map